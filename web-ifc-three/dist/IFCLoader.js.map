{"version":3,"file":"IFCLoader.js","sources":["../src/IFC/components/IFCModel.ts","../src/IFC/components/IFCParser.ts","../src/IFC/components/subsets/ItemsMap.ts","../src/IFC/components/subsets/SubsetUtils.ts","../src/IFC/components/subsets/SubsetCreator.ts","../src/IFC/components/subsets/SubsetManager.ts","../src/IFC/BaseDefinitions.ts","../src/IFC/components/properties/BasePropertyManager.ts","../src/IFC/components/properties/WebIfcPropertyManager.ts","../src/IFC/components/properties/JSONPropertyManager.ts","../src/IFC/components/properties/GeometryTypes.ts","../src/IFC/components/properties/PropertySerializer.ts","../src/IFC/components/properties/PropertyManager.ts","../src/IFC/components/TypeManager.ts","../src/IFC/components/BvhManager.ts","../src/IFC/web-workers/BaseDefinitions.ts","../src/IFC/web-workers/serializer/Vector.ts","../src/IFC/web-workers/serializer/IfcGeometry.ts","../src/IFC/web-workers/serializer/FlatMesh.ts","../src/IFC/web-workers/serializer/FlatMeshVector.ts","../src/IFC/web-workers/serializer/Material.ts","../src/IFC/web-workers/serializer/Geometry.ts","../src/IFC/web-workers/serializer/Mesh.ts","../src/IFC/web-workers/serializer/Serializer.ts","../src/IFC/web-workers/handlers/PropertyHandler.ts","../src/IFC/web-workers/handlers/WebIfcHandler.ts","../src/IFC/web-workers/handlers/WorkerStateHandler.ts","../src/IFC/indexedDB/IndexedDatabase.ts","../src/IFC/web-workers/handlers/ParserHandler.ts","../src/IFC/web-workers/IFCWorkerHandler.ts","../src/IFC/components/MemoryCleaner.ts","../src/IFC/components/IFCUtils.ts","../src/IFC/components/sequence/Data.ts","../src/IFC/components/IFCManager.ts","../src/IFCLoader.ts"],"sourcesContent":["import { BufferGeometry, Material, Mesh, Object3D, Scene } from 'three';\nimport { IFCManager } from './IFCManager';\nimport { BaseSubsetConfig } from '../BaseDefinitions';\n\nconst nullIfcManagerErrorMessage = 'IfcManager is null!';\n\n/**\n * Represents an IFC model. This object is returned by the `IFCLoader` after loading an IFC.\n * @geometry `THREE.Buffergeometry`, see Three.js documentation.\n * @materials `THREE.Material[]`, see Three.js documentation.\n * @manager contains all the logic to work with IFC.\n */\nexport class IFCModel extends Mesh {\n\n    private static modelIdCounter = 0;\n\n    static dispose() {\n        IFCModel.modelIdCounter = 0;\n    }\n\n    modelID = IFCModel.modelIdCounter++;\n    ifcManager: IFCManager | null = null;\n\n    /**\n     * @deprecated `IfcModel` is already a mesh; you can place it in the scene directly.\n     */\n    mesh = this;\n\n    setIFCManager(manager: IFCManager) {\n        this.ifcManager = manager;\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.setWasmPath` instead.\n     *\n     * Sets the relative path of web-ifc.wasm file in the project.\n     * Beware: you **must** serve this file in your page; this means\n     * that you have to copy this files from *node_modules/web-ifc*\n     * to your deployment directory.\n     *\n     * If you don't use this methods,\n     * IFC.js assumes that you are serving it in the root directory.\n     *\n     * Example if web-ifc.wasm is in dist/wasmDir:\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\n     *\n     * @path Relative path to web-ifc.wasm.\n     */\n    setWasmPath(path: string) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        this.ifcManager.setWasmPath(path);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.close` instead.\n     *\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\n     * @scene Scene where the model is (if it's located in a scene).\n     */\n    close(scene?: Scene) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        this.ifcManager.close(this.modelID, scene);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getExpressId` instead.\n     *\n     * Gets the **Express ID** to which the given face belongs.\n     * This ID uniquely identifies this entity within this IFC file.\n     * @geometry The geometry of the IFC model.\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\n     */\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getExpressId(geometry, faceIndex);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getAllItemsOfType` instead.\n     *\n     * Returns all items of the specified type. You can import\n     * the types from *web-ifc*.\n     *\n     * Example to get all the standard walls of a project:\n     * ```js\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\n     * ```\n     * @type The type of IFC items to get.\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\n     */\n    getAllItemsOfType(type: number, verbose: boolean) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getAllItemsOfType(this.modelID, type, verbose);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getItemProperties` instead.\n     *\n     * Gets the native properties of the given element.\n     * @id Express ID of the element.\n     * @recursive Wether you want to get the information of the referenced elements recursively.\n     */\n    getItemProperties(id: number, recursive = false) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getItemProperties(this.modelID, id, recursive);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getPropertySets` instead.\n     *\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\n     * assigned to the given element.\n     * @id Express ID of the element.\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\n     */\n    getPropertySets(id: number, recursive = false) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getPropertySets(this.modelID, id, recursive);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getTypeProperties` instead.\n     *\n     * Gets the properties of the type assigned to the element.\n     * For example, if applied to a wall (IfcWall), this would get back the information\n     * contained in the IfcWallType assigned to it, if any.\n     * @id Express ID of the element.\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\n     */\n    getTypeProperties(id: number, recursive = false) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getTypeProperties(this.modelID, id, recursive);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getIfcType` instead.\n     *\n     * Gets the ifc type of the specified item.\n     * @id Express ID of the element.\n     */\n    getIfcType(id: number) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getIfcType(this.modelID, id);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getSpatialStructure` instead.\n     *\n     * Gets the spatial structure of the project. The\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\n     * is the hierarchical structure that organizes every IFC project (all physical items\n     * are referenced to an element of the spatial structure). It is formed by\n     * one IfcProject that contains one or more IfcSites, that contain one or more\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\n     * one or more IfcSpaces.\n     */\n    getSpatialStructure() {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getSpatialStructure(this.modelID);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.getSubset` instead.\n     *\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\n     * If no material is given, this returns the subset with the original materials.\n     * @material Material assigned to the subset, if any.\n     */\n    getSubset(material?: Material) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        return this.ifcManager.getSubset(this.modelID, material);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.removeSubset` instead.\n     *\n     * Removes the specified subset.\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\n     * @material Material assigned to the subset, if any.\n     */\n    removeSubset(material?: Material, customID?: string) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        this.ifcManager.removeSubset(this.modelID, material, customID);\n    }\n\n    /**\n     * @deprecated Use `IfcModel.ifcManager.createSubset` instead.\n     *\n     * Creates a new geometric subset.\n     * @config A configuration object with the following options:\n     * - **scene**: `THREE.Object3D` where the model is located.\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\n     * - **removePrevious**: Wether to remove the previous subset of this model with this material.\n     * - **material**: (optional) Wether to apply a material to the subset\n     */\n    createSubset(config: BaseSubsetConfig) {\n        if (this.ifcManager === null) throw new Error(nullIfcManagerErrorMessage);\n        const modelConfig = { ...config, modelID: this.modelID };\n        return this.ifcManager.createSubset(modelConfig);\n    }\n}\n","//@ts-ignore\nimport {\n    PlacedGeometry,\n    Color as ifcColor,\n    IfcGeometry,\n    IFCSPACE,\n    FlatMesh,\n    IFCOPENINGELEMENT,\n    IFCPRODUCTDEFINITIONSHAPE\n} from 'web-ifc';\nimport { IfcState, IfcMesh } from '../BaseDefinitions';\nimport {\n    Color,\n    MeshLambertMaterial,\n    DoubleSide,\n    Matrix4,\n    BufferGeometry,\n    BufferAttribute,\n    Mesh\n} from 'three';\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\nimport { BvhManager } from './BvhManager';\nimport { IFCModel } from './IFCModel';\n\nexport interface ParserProgress {\n    loaded: number;\n    total: number;\n}\n\nexport interface OptionalCategories {\n    [category: number]: boolean\n}\n\nexport interface ParserAPI {\n    parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel>;\n\n    getAndClearErrors(_modelId: number): void;\n\n    setupOptionalCategories(config: OptionalCategories): Promise<void>;\n\n    optionalCategories: OptionalCategories;\n}\n\nexport interface GeometriesByMaterial {\n    [materialID: string]: {\n        material: MeshLambertMaterial,\n        geometries: BufferGeometry[]\n    }\n}\n\n/**\n * Reads all the geometry of the IFC file and generates an optimized `THREE.Mesh`.\n */\nexport class IFCParser implements ParserAPI {\n    loadedModels = 0;\n\n    optionalCategories: OptionalCategories = {\n        [IFCSPACE]: true,\n        [IFCOPENINGELEMENT]: false\n    };\n\n    private geometriesByMaterials: GeometriesByMaterial = {};\n\n    private loadingState = {\n        total: 0,\n        current: 0,\n        step: 0.1\n    }\n\n    // Represents the index of the model in webIfcAPI\n    private currentWebIfcID = -1;\n    // When using JSON data for optimization, webIfcAPI is reinitialized every time a model is loaded\n    // This means that currentID is always 0, while currentModelID is the real index of stored models\n    private currentModelID = -1;\n\n    // BVH is optional because when using workers we have to apply it in the main thread,\n    // once the model has been serialized and reconstructed\n    constructor(private state: IfcState, private BVH?: BvhManager) {\n    }\n\n    async setupOptionalCategories(config: OptionalCategories) {\n        this.optionalCategories = config;\n    }\n\n    async parse(buffer: any, coordinationMatrix?: number[]) {\n        if (this.state.api.wasmModule === undefined) await this.state.api.Init();\n        await this.newIfcModel(buffer);\n        this.loadedModels++;\n        if (coordinationMatrix) {\n            await this.state.api.SetGeometryTransformation(this.currentWebIfcID, coordinationMatrix);\n        }\n        return this.loadAllGeometry(this.currentWebIfcID);\n    }\n\n    getAndClearErrors(_modelId: number) {\n        // return this.state.api.GetAndClearErrors(modelId);\n    }\n\n    private notifyProgress(loaded: number, total: number) {\n        if (this.state.onProgress) this.state.onProgress({ loaded, total });\n    }\n\n    private async newIfcModel(buffer: any) {\n        const data = new Uint8Array(buffer);\n        this.currentWebIfcID = await this.state.api.OpenModel(data, this.state.webIfcSettings);\n        this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;\n        this.state.models[this.currentModelID] = {\n            modelID: this.currentModelID,\n            mesh: {} as IfcMesh,\n            types: {},\n            jsonData: {}\n        };\n    }\n\n    private async loadAllGeometry(modelID: number) {\n        this.addOptionalCategories(modelID);\n        await this.initializeLoadingState(modelID);\n\n        this.state.api.StreamAllMeshes(modelID, (mesh: FlatMesh) => {\n            this.updateLoadingState();\n            // only during the lifetime of this function call, the geometry is available in memory\n            this.streamMesh(modelID, mesh);\n        });\n\n        this.notifyLoadingEnded();\n        const geometries: BufferGeometry[] = [];\n        const materials: MeshLambertMaterial[] = [];\n\n        Object.keys(this.geometriesByMaterials).forEach((key) => {\n            const geometriesByMaterial = this.geometriesByMaterials[key].geometries;\n            const merged = mergeBufferGeometries(geometriesByMaterial);\n            materials.push(this.geometriesByMaterials[key].material);\n            geometries.push(merged);\n        });\n\n        const combinedGeometry = mergeBufferGeometries(geometries, true);\n        this.cleanUpGeometryMemory(geometries);\n        if (this.BVH) this.BVH.applyThreeMeshBVH(combinedGeometry);\n        const model = new IFCModel(combinedGeometry, materials);\n        this.state.models[this.currentModelID].mesh = model;\n        return model;\n    }\n\n    private async initializeLoadingState(modelID: number) {\n        const shapes = await this.state.api.GetLineIDsWithType(modelID, IFCPRODUCTDEFINITIONSHAPE);\n        this.loadingState.total = shapes.size();\n        this.loadingState.current = 0;\n        this.loadingState.step = 0.1;\n    }\n\n    private notifyLoadingEnded() {\n        this.notifyProgress(this.loadingState.total, this.loadingState.total);\n    }\n\n    private updateLoadingState() {\n        const realCurrentItem = Math.min(this.loadingState.current++, this.loadingState.total);\n        if(realCurrentItem / this.loadingState.total >= this.loadingState.step) {\n            const currentProgress = Math.ceil(this.loadingState.total * this.loadingState.step);\n            this.notifyProgress(currentProgress, this.loadingState.total);\n            this.loadingState.step += 0.1;\n        }\n    }\n\n    // Some categories (like IfcSpace and IfcOpeningElement) need to be set explicitly\n    private addOptionalCategories(modelID: number) {\n\n        const optionalTypes: number[] = [];\n\n        for (let key in this.optionalCategories) {\n            if (this.optionalCategories.hasOwnProperty(key)) {\n                const category = parseInt(key);\n                if (this.optionalCategories[category]) optionalTypes.push(category);\n            }\n        }\n\n        this.state.api.StreamAllMeshesWithTypes(this.currentWebIfcID, optionalTypes, (mesh: FlatMesh) => {\n            this.streamMesh(modelID, mesh);\n        });\n    }\n\n    private streamMesh(modelID: number, mesh: FlatMesh) {\n        const placedGeometries = mesh.geometries;\n        const size = placedGeometries.size();\n\n        for (let i = 0; i < size; i++) {\n            const placedGeometry = placedGeometries.get(i);\n            let itemMesh = this.getPlacedGeometry(modelID, mesh.expressID, placedGeometry);\n            let geom = itemMesh.geometry.applyMatrix4(itemMesh.matrix);\n            this.storeGeometryByMaterial(placedGeometry.color, geom);\n        }\n    }\n\n    private getPlacedGeometry(modelID: number, expressID: number, placedGeometry: PlacedGeometry) {\n        const geometry = this.getBufferGeometry(modelID, expressID, placedGeometry);\n        const mesh = new Mesh(geometry);\n        mesh.matrix = this.getMeshMatrix(placedGeometry.flatTransformation);\n        mesh.matrixAutoUpdate = false;\n        return mesh;\n    }\n\n    private getBufferGeometry(modelID: number, expressID: number, placedGeometry: PlacedGeometry) {\n        const geometry = this.state.api.GetGeometry(modelID, placedGeometry.geometryExpressID) as IfcGeometry;\n        const verts = this.state.api.GetVertexArray(geometry.GetVertexData(), geometry.GetVertexDataSize()) as Float32Array;\n        const indices = this.state.api.GetIndexArray(geometry.GetIndexData(), geometry.GetIndexDataSize()) as Uint32Array;\n        const buffer = this.ifcGeometryToBuffer(expressID, verts, indices);\n        //@ts-ignore\n        geometry.delete();\n        return buffer;\n    }\n\n    private storeGeometryByMaterial(color: ifcColor, geometry: BufferGeometry) {\n        let colID = `${color.x}${color.y}${color.z}${color.w}`;\n        if (this.geometriesByMaterials[colID]) {\n            this.geometriesByMaterials[colID].geometries.push(geometry);\n            return;\n        }\n\n        // Assume RGB components are in sRGB-Rec709-D65 colorspace, and specify\n        // this so three.js can convert if THREE.ColorManagement APIs are enabled.\n        const col = new Color().setRGB(color.x, color.y, color.z, 'srgb');\n        const material = new MeshLambertMaterial({ color: col, side: DoubleSide });\n        material.transparent = color.w !== 1;\n        if (material.transparent) material.opacity = color.w;\n        this.geometriesByMaterials[colID] = { material, geometries: [geometry] };\n    }\n\n    private getMeshMatrix(matrix: Array<number>) {\n        const mat = new Matrix4();\n        mat.fromArray(matrix);\n        return mat;\n    }\n\n    private ifcGeometryToBuffer(expressID: number, vertexData: Float32Array, indexData: Uint32Array) {\n        const geometry = new BufferGeometry();\n\n        const posFloats = new Float32Array(vertexData.length / 2);\n        const normFloats = new Float32Array(vertexData.length / 2);\n        const idAttribute = new Uint32Array(vertexData.length / 6);\n\n        for (let i = 0; i < vertexData.length; i += 6) {\n            posFloats[i / 2] = vertexData[i];\n            posFloats[i / 2 + 1] = vertexData[i + 1];\n            posFloats[i / 2 + 2] = vertexData[i + 2];\n\n            normFloats[i / 2] = vertexData[i + 3];\n            normFloats[i / 2 + 1] = vertexData[i + 4];\n            normFloats[i / 2 + 2] = vertexData[i + 5];\n\n            idAttribute[i / 6] = expressID;\n        }\n\n        geometry.setAttribute(\n            'position',\n            new BufferAttribute(posFloats, 3));\n        geometry.setAttribute(\n            'normal',\n            new BufferAttribute(normFloats, 3));\n        geometry.setAttribute(\n            'expressID',\n            new BufferAttribute(idAttribute, 1));\n\n        geometry.setIndex(new BufferAttribute(indexData, 1));\n        return geometry;\n    }\n\n    // Three.js geometry has to be manually deallocated\n    private cleanUpGeometryMemory(geometries: BufferGeometry[]) {\n        geometries.forEach(geometry => geometry.dispose());\n\n        Object.keys(this.geometriesByMaterials).forEach((materialID) => {\n            const geometriesByMaterial = this.geometriesByMaterials[materialID];\n            geometriesByMaterial.geometries.forEach(geometry => geometry.dispose());\n            geometriesByMaterial.geometries = [];\n            // @ts-ignore\n            geometriesByMaterial.material = null;\n        });\n        this.geometriesByMaterials = {};\n    }\n}\n","import { IfcState } from '../../BaseDefinitions';\nimport { BufferAttribute, BufferGeometry, Material } from 'three';\n\n// The number array has the meaning: [start, end, start, end, start, end...]\nexport interface Indices {\n    [materialID: number]: number[]\n}\n\nexport interface IndexedGeometry extends BufferGeometry {\n    index: BufferAttribute;\n}\n\nexport interface Group {\n    start: number,\n    count: number,\n    materialIndex?: number\n}\n\nexport interface Items {\n    indexCache: Uint32Array,\n    map: Map<number, Indices>\n}\n\nexport interface IndicesMap {\n    [modelID: number]: {\n        indexCache: Uint32Array;\n        map: Map<number, Indices>;\n    }\n}\n\nexport class ItemsMap {\n\n    constructor(private state: IfcState) {\n    }\n\n    map: IndicesMap = {};\n\n    generateGeometryIndexMap(modelID: number) {\n        if (this.map[modelID]) return;\n        const geometry = this.getGeometry(modelID);\n        const items = this.newItemsMap(modelID, geometry);\n        for (const group of geometry.groups) {\n            this.fillItemsWithGroupInfo(group, geometry, items);\n        }\n    }\n\n    getSubsetID(modelID: number, material?: Material, customID = 'DEFAULT') {\n        const baseID = modelID;\n        const materialID = material ? material.uuid : 'DEFAULT';\n        return `${baseID} - ${materialID} - ${customID}`;\n    }\n\n    // Use this only for destroying the current IFCLoader instance\n    dispose() {\n        Object.values(this.map).forEach(model => {\n            (model.indexCache as any) = null;\n            (model.map as any) = null;\n        });\n\n        (this.map as any) = null;\n    }\n\n    private getGeometry(modelID: number) {\n        const geometry = this.state.models[modelID].mesh.geometry;\n        if (!geometry) throw new Error('Model without geometry.');\n        if (!geometry.index) throw new Error('Geometry must be indexed');\n        return geometry as IndexedGeometry;\n    }\n\n    private newItemsMap(modelID: number, geometry: IndexedGeometry) {\n        const startIndices = geometry.index.array as Uint32Array;\n        this.map[modelID] = {\n            indexCache: startIndices.slice(0, geometry.index.array.length),\n            map: new Map()\n        };\n        return this.map[modelID] as Items;\n    }\n\n    private fillItemsWithGroupInfo(group: Group, geometry: IndexedGeometry, items: Items) {\n        let prevExpressID = -1;\n\n        const materialIndex = group.materialIndex as number;\n        const materialStart = group.start;\n        const materialEnd = materialStart + group.count - 1;\n\n        let objectStart = -1;\n        let objectEnd = -1;\n\n        for (let i = materialStart; i <= materialEnd; i++) {\n            const index = geometry.index.array[i];\n            const bufferAttr = geometry.attributes.expressID as BufferAttribute;\n            const expressID = bufferAttr.array[index];\n\n            // First iteration\n            if (prevExpressID === -1) {\n                prevExpressID = expressID;\n                objectStart = i;\n            }\n\n            // It's the end of the material, which also means end of the object\n            const isEndOfMaterial = i === materialEnd;\n            if (isEndOfMaterial) {\n                const store = this.getMaterialStore(items.map, expressID, materialIndex);\n                store.push(objectStart, materialEnd);\n                break;\n            }\n\n            // Still going through the same object\n            if (prevExpressID === expressID) continue;\n\n            // New object starts; save previous object\n\n            // Store previous object\n            const store = this.getMaterialStore(items.map, prevExpressID, materialIndex);\n            objectEnd = i - 1;\n            store.push(objectStart, objectEnd);\n\n            // Get ready to process next object\n            prevExpressID = expressID;\n            objectStart = i;\n        }\n    }\n\n    private getMaterialStore(map: Map<number, Indices>, id: number, matIndex: number) {\n        // If this object wasn't store before, add it to the map\n        if (map.get(id) === undefined) {\n            map.set(id, {});\n        }\n        const storedIfcItem = map.get(id);\n        if (storedIfcItem === undefined) throw new Error('Geometry map generation error');\n\n        // If this material wasn't stored for this object before, add it to the object\n        if (storedIfcItem[matIndex] === undefined) {\n            storedIfcItem[matIndex] = [];\n        }\n        return storedIfcItem[matIndex];\n    }\n\n}","export class SubsetUtils {\n\n    // If flatten, all indices are in the same array; otherwise, indices are split in subarrays by material\n    static getAllIndicesOfGroup(modelID: number, ids: number[], materialIndex: number, items: any, flatten = true) {\n        const indicesByGroup: any = [];\n        for (const expressID of ids) {\n            const entry = items.map.get(expressID);\n            if (!entry) continue;\n            const value = entry[materialIndex];\n            if (!value) continue;\n            SubsetUtils.getIndexChunk(value, indicesByGroup, materialIndex, items, flatten);\n        }\n        return indicesByGroup;\n    }\n\n    private static getIndexChunk(value: number[], indicesByGroup: any, materialIndex: number, items: any, flatten: boolean) {\n        const pairs = value.length / 2;\n        for (let pair = 0; pair < pairs; pair++) {\n            const pairIndex = pair * 2;\n            const start = value[pairIndex];\n            const end = value[pairIndex + 1];\n            for (let j = start; j <= end; j++) {\n                if(flatten) indicesByGroup.push(items.indexCache[j]);\n                else {\n                    if (!indicesByGroup[materialIndex]) indicesByGroup[materialIndex] = [];\n                    indicesByGroup[materialIndex].push(items.indexCache[j]);\n                }\n            }\n        }\n    }\n}","import { BufferGeometry, Mesh } from 'three';\nimport { IfcState, SubsetConfig } from '../../BaseDefinitions';\nimport { IndexedGeometry, ItemsMap } from './ItemsMap';\nimport { Subset, Subsets } from './SubsetManager';\nimport { SubsetUtils } from './SubsetUtils';\nimport { BvhManager } from '../BvhManager';\n\nexport class SubsetCreator {\n\n    private tempIndex: number[] = [];\n\n    constructor(private state: IfcState, private items: ItemsMap, private subsets: Subsets, private BVH: BvhManager) {\n    }\n\n    createSubset(config: SubsetConfig, subsetID: string) {\n        if (!this.items.map[config.modelID]) this.items.generateGeometryIndexMap(config.modelID);\n        if (!this.subsets[subsetID]) this.initializeSubset(config, subsetID);\n        this.filterIndices(config, subsetID);\n        this.constructSubsetByMaterial(config, subsetID);\n        config.ids.forEach(id => this.subsets[subsetID].ids.add(id));\n        this.subsets[subsetID].mesh.geometry.setIndex(this.tempIndex);\n        this.tempIndex.length = 0;\n        const subset = this.subsets[subsetID].mesh;\n        if (config.applyBVH) this.BVH.applyThreeMeshBVH(subset.geometry);\n        if (config.scene) config.scene.add(subset);\n        return this.subsets[subsetID].mesh;\n    }\n\n    dispose() {\n        this.tempIndex = [];\n    }\n\n    private initializeSubset(config: SubsetConfig, subsetID: string) {\n        const model = this.state.models[config.modelID].mesh;\n        const subsetGeom = new BufferGeometry();\n        this.initializeSubsetAttributes(subsetGeom, model);\n        if (!config.material) this.initializeSubsetGroups(subsetGeom, model);\n        const mesh = new Mesh(subsetGeom, config.material || model.material) as Subset;\n        mesh.modelID = config.modelID;\n        const bvh = Boolean(config.applyBVH);\n        this.subsets[subsetID] = { ids: new Set<number>(), mesh, bvh };\n        model.add(mesh);\n    }\n\n    // The subset shares the same attributes as the original (no memory consumed)\n    private initializeSubsetAttributes(subsetGeom: BufferGeometry, model: Mesh) {\n        subsetGeom.setAttribute('position', model.geometry.attributes.position);\n        subsetGeom.setAttribute('normal', model.geometry.attributes.normal);\n        subsetGeom.setAttribute('expressID', model.geometry.attributes.expressID);\n        subsetGeom.setIndex([]);\n    }\n\n    // If the subset has original materials, initialize the groups for the subset\n    private initializeSubsetGroups(subsetGeom: BufferGeometry, model: Mesh) {\n        subsetGeom.groups = JSON.parse(JSON.stringify(model.geometry.groups));\n        this.resetGroups(subsetGeom);\n    }\n\n    // Remove previous indices or filter the given ones to avoid repeating items\n    private filterIndices(config: SubsetConfig, subsetID: string) {\n        const geometry = this.subsets[subsetID].mesh.geometry as IndexedGeometry;\n        if (config.removePrevious) {\n            geometry.setIndex([]);\n            this.resetGroups(geometry);\n            return;\n        }\n        const previousIndices = geometry.index.array;\n        const previousIDs = this.subsets[subsetID].ids;\n        config.ids = config.ids.filter(id => !previousIDs.has(id));\n        this.tempIndex = Array.from(previousIndices);\n    }\n\n    private constructSubsetByMaterial(config: SubsetConfig, subsetID: string) {\n        const model = this.state.models[config.modelID].mesh;\n        const newIndices = { count: 0 };\n        for (let i = 0; i < model.geometry.groups.length; i++) {\n            this.insertNewIndices(config, subsetID, i, newIndices);\n        }\n    }\n\n    // If this subset has original materials, insert indices in correct position and update groups\n    // Otherwise, just insert indices at any position\n    private insertNewIndices(config: SubsetConfig, subsetID: string, materialIndex: number, newIndices: any) {\n        const items = this.items.map[config.modelID];\n        const indicesOfOneMaterial = SubsetUtils.getAllIndicesOfGroup(config.modelID, config.ids, materialIndex, items) as number[];\n\n        if (!config.material) {\n            this.insertIndicesAtGroup(subsetID, indicesOfOneMaterial, materialIndex, newIndices);\n        } else {\n            indicesOfOneMaterial.forEach(index => this.tempIndex.push(index));\n        }\n    }\n\n    private insertIndicesAtGroup(subsetID: string, indicesByGroup: number[], index: number, newIndices: any) {\n        const currentGroup = this.getCurrentGroup(subsetID, index);\n        currentGroup.start += newIndices.count;\n        let newIndicesPosition = currentGroup.start + currentGroup.count;\n        newIndices.count += indicesByGroup.length;\n        if (indicesByGroup.length > 0) {\n            let position = newIndicesPosition;\n            const start = this.tempIndex.slice(0, position);\n            const end = this.tempIndex.slice(position);\n            this.tempIndex = Array.prototype.concat.apply([], [start, indicesByGroup, end]);\n            currentGroup.count += indicesByGroup.length;\n        }\n    }\n\n    private getCurrentGroup(subsetID: string, groupIndex: number) {\n        const geometry = this.subsets[subsetID].mesh.geometry as IndexedGeometry;\n        return geometry.groups[groupIndex];\n    }\n\n    private resetGroups(geometry: BufferGeometry) {\n        geometry.groups.forEach((group) => {\n            group.start = 0;\n            group.count = 0;\n        });\n    }\n}","import { Material, Mesh, Object3D } from 'three';\nimport { SubsetConfig, IfcState } from '../../BaseDefinitions';\nimport { BvhManager } from '../BvhManager';\nimport { ItemsMap } from './ItemsMap';\nimport { SubsetCreator } from './SubsetCreator';\n\nexport interface Subset extends Mesh {\n    modelID: number;\n}\n\nexport type Subsets = {\n    [subsetID: string]: { ids: Set<number>, mesh: Subset, bvh: boolean };\n};\n\n/**\n * Contains the logic to get, create and delete geometric subsets of an IFC model. For example,\n * this can extract all the items in a specific IfcBuildingStorey and create a new Mesh.\n */\nexport class SubsetManager {\n    readonly items: ItemsMap;\n    private readonly BVH: BvhManager;\n    private state: IfcState;\n    private subsets: Subsets = {};\n    private subsetCreator: SubsetCreator;\n\n    constructor(state: IfcState, BVH: BvhManager) {\n        this.state = state;\n        this.items = new ItemsMap(state);\n        this.BVH = BVH;\n        this.subsetCreator = new SubsetCreator(state, this.items, this.subsets, this.BVH);\n    }\n\n    getAllSubsets(){\n        return this.subsets\n    }\n\n    getSubset(modelID: number, material?: Material, customId?: string) {\n        const subsetID = this.getSubsetID(modelID, material, customId);\n        return this.subsets[subsetID].mesh;\n    }\n\n    removeSubset(modelID: number, material?: Material, customID?: string) {\n        const subsetID = this.getSubsetID(modelID, material, customID);\n        const subset = this.subsets[subsetID];\n        if (!subset) return;\n        if (subset.mesh.parent) subset.mesh.removeFromParent();\n        subset.mesh.geometry.attributes = {};\n        subset.mesh.geometry.index = null;\n        subset.mesh.geometry.dispose();\n        // @ts-ignore\n        subset.mesh.geometry = null;\n        delete this.subsets[subsetID];\n    }\n\n    createSubset(config: SubsetConfig) {\n        const subsetID = this.getSubsetID(config.modelID, config.material, config.customID);\n        return this.subsetCreator.createSubset(config, subsetID);\n    }\n\n    removeFromSubset(modelID: number, ids: number[], customID?: string, material?: Material) {\n        const subsetID = this.getSubsetID(modelID, material, customID);\n        if (!this.subsets[subsetID]) return;\n\n        const previousIDs = this.subsets[subsetID].ids;\n        ids.forEach((id) => {\n            if(previousIDs.has(id)) previousIDs.delete(id);\n        })\n\n        return this.createSubset({\n            modelID,\n            removePrevious: true,\n            material,\n            customID,\n            applyBVH: this.subsets[subsetID].bvh,\n            ids: Array.from(previousIDs),\n            scene: this.subsets[subsetID].mesh.parent as Object3D\n        });\n    }\n\n    clearSubset(modelID: number, customID?: string, material?: Material) {\n        const subsetID = this.getSubsetID(modelID, material, customID);\n        if (!this.subsets[subsetID]) return;\n        this.subsets[subsetID].ids.clear();\n        const subset = this.getSubset(modelID, material, customID);\n        subset.geometry.setIndex([]);\n    }\n\n    // Use this only for destroying the current IFCLoader instance\n    dispose() {\n        this.items.dispose();\n        this.subsetCreator.dispose();\n\n        Object.values(this.subsets).forEach(subset => {\n            (subset.ids as any) = null;\n            subset.mesh.removeFromParent();\n            const mats = subset.mesh.material;\n            if(Array.isArray(mats)) mats.forEach(mat => mat.dispose());\n            else mats.dispose();\n            subset.mesh.geometry.index = null;\n            subset.mesh.geometry.dispose();\n            const geom = subset.mesh.geometry as any;\n            if(geom.disposeBoundsTree) geom.disposeBoundsTree();\n            (subset.mesh as any) = null;\n        });\n        (this.subsets as any) = null;\n    }\n\n    private getSubsetID(modelID: number, material?: Material, customID = 'DEFAULT') {\n        const baseID = modelID;\n        const materialID = material ? material.uuid : 'DEFAULT';\n        return `${baseID} - ${materialID} - ${customID}`;\n    }\n}\n","import { BufferAttribute, BufferGeometry, Material, Matrix4, Mesh, Object3D } from 'three';\n// TODO: Remove ts ignore comments when @types/three gets updated\n// @ts-ignore\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\nimport {\n    FlatMesh,\n    IfcGeometry,\n    IFCRELAGGREGATES, IFCRELASSOCIATESMATERIAL,\n    IFCRELCONTAINEDINSPATIALSTRUCTURE,\n    IFCRELDEFINESBYPROPERTIES,\n    IFCRELDEFINESBYTYPE, LoaderError, LoaderSettings, RawLineData, Vector\n} from 'web-ifc';\nimport {ParserProgress} from \"./components/IFCParser\";\n\nexport const IdAttrName = 'expressID';\n\nexport type IdAttributeByMaterial = { [id: number]: number };\nexport type IdAttributesByMaterials = { [materialID: string]: IdAttributeByMaterial };\n\n//TODO: Rename \"scene\" to \"parent\" in the next major release\nexport interface BaseSubsetConfig {\n    scene?: Object3D;\n    ids: number[];\n    removePrevious: boolean;\n    material?: Material;\n    customID?: string;\n    applyBVH?: boolean;\n}\n\nexport interface SubsetConfig extends BaseSubsetConfig {\n    modelID: number;\n}\n\nexport const DEFAULT = 'default';\n\nexport type MapFaceindexID = { [key: number]: number };\n\nexport interface TypesMap {\n    [key: number]: number;\n}\n\n\nexport interface IfcModel {\n    modelID: number;\n    mesh: IfcMesh;\n    types: TypesMap;\n    jsonData: { [id: number]: JSONObject };\n}\n\nexport interface JSONObject {\n    expressID: number;\n    type: string;\n    [key: string]: any;\n}\n\nexport interface Worker {\n    active: boolean;\n    path: string;\n}\n\nexport interface IfcState {\n    models: { [modelID: number]: IfcModel };\n    api: WebIfcAPI;\n    useJSON: boolean;\n    worker: Worker;\n    webIfcSettings?: LoaderSettings;\n    onProgress?: (event: ParserProgress) => void;\n    coordinationMatrix?: Matrix4,\n    wasmPath?: string;\n}\n\nexport interface IfcMesh extends Mesh {\n    modelID: number;\n}\n\nexport interface Node {\n    expressID: number;\n    type: string;\n    children: Node[];\n}\n\nexport interface pName {\n    name: number;\n    relating: string;\n    related: string;\n    key: string;\n}\n\nexport interface NewIfcModel {\n    schema: string;\n    name?: string;\n    description?: string[];\n    authors?: string[];\n    organizations?: string[];\n    authorization?: string;\n}\n\nexport const PropsNames = {\n    aggregates: {\n        name: IFCRELAGGREGATES,\n        relating: 'RelatingObject',\n        related: 'RelatedObjects',\n        key: 'children'\n    },\n    spatial: {\n        name: IFCRELCONTAINEDINSPATIALSTRUCTURE,\n        relating: 'RelatingStructure',\n        related: 'RelatedElements',\n        key: 'children'\n    },\n    psets: {\n        name: IFCRELDEFINESBYPROPERTIES,\n        relating: 'RelatingPropertyDefinition',\n        related: 'RelatedObjects',\n        key: 'hasPsets'\n    },\n    materials: {\n        name: IFCRELASSOCIATESMATERIAL,\n        relating: 'RelatingMaterial',\n        related: 'RelatedObjects',\n        key: 'hasMaterial'\n    },\n    type: {\n        name: IFCRELDEFINESBYTYPE,\n        relating: 'RelatingType',\n        related: 'RelatedObjects',\n        key: 'hasType'\n    }\n};\n\nexport interface WebIfcAPI {\n\n    wasmModule: any;\n\n    Init(): void | Promise<void>;\n\n    // To close the web worker\n    Close?: () => void;\n\n    /**\n     * Opens a model and returns a modelID number\n     * @data Buffer containing IFC data (bytes)\n     * @data Settings settings for loading the model\n     */\n    OpenModel(data: string | Uint8Array, settings?: LoaderSettings): number | Promise<number>;\n\n    GetHeaderLine(modelID: number, headerType: number): any | Promise<any>;\n\n    /**\n     * Creates a new model and returns a modelID number\n     * @data Settings settings for generating data the model\n     */\n    CreateModel(model: NewIfcModel, settings?: LoaderSettings): number | Promise<number>;\n\n    ExportFileAsIFC(modelID: number): Uint8Array | Promise<Uint8Array>;\n\n    /**\n     * Opens a model and returns a modelID number\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\n     * @data Buffer containing IFC data (bytes)\n     */\n    GetGeometry(modelID: number, geometryExpressID: number): IfcGeometry | Promise<IfcGeometry>;\n\n    GetLine(modelID: number, expressID: number, flatten?: boolean):  any | Promise<any>;\n\n    GetAndClearErrors(modelID: number): Vector<LoaderError> | Promise<Vector<LoaderError>>;\n\n    WriteLine(modelID: number, lineObject: any): void | Promise<void>;\n\n    FlattenLine(modelID: number, line: any): void | Promise<void>;\n\n    GetRawLineData(modelID: number, expressID: number): RawLineData | Promise<RawLineData>;\n\n    WriteRawLineData(modelID: number, data: RawLineData):  any | Promise<any>;\n\n    GetLineIDsWithType(modelID: number, type: number): Vector<number> | Promise<Vector<number>>;\n\n    GetAllLines(modelID: Number): Vector<number> | Promise<Vector<number>>;\n\n    SetGeometryTransformation(modelID: number, transformationMatrix: Array<number>): void | Promise<void>;\n\n    GetCoordinationMatrix(modelID: number): Array<number> | Promise<Array<number>>;\n\n    GetVertexArray(ptr: number, size: number): Float32Array | Promise<Float32Array>;\n\n    GetIndexArray(ptr: number, size: number): Uint32Array | Promise<Uint32Array>;\n\n    GetNameFromTypeCode(type:number): string | Promise<string>;\n\n    GetTypeCodeFromName(typeName:string): number | Promise<number>;\n\n    GetIfcEntityList(modelID: number) : Array<number> | Promise<Array<number>>;\n\n    getSubArray(heap: any, startPtr: any, sizeBytes: any): any | Promise<any>;\n\n    /**\n     * Closes a model and frees all related memory\n     * @modelID Model handle retrieved by OpenModel, model must not be closed\n     */\n    CloseModel(modelID: number): void | Promise<void>;\n\n    StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\n\n    StreamAllMeshesWithTypes(modelID: number, types: Array<number>, meshCallback: (mesh: FlatMesh) => void): void | Promise<void>;\n\n    /**\n     * Checks if a specific model ID is open or closed\n     * @modelID Model handle retrieved by OpenModel\n     */\n    IsModelOpen(modelID: number): boolean | Promise<boolean>;\n\n    /**\n     * Load all geometry in a model\n     * @modelID Model handle retrieved by OpenModel\n     */\n    LoadAllGeometry(modelID: number): Vector<FlatMesh> | Promise<Vector<FlatMesh>>;\n\n    /**\n     * Load geometry for a single element\n     * @modelID Model handle retrieved by OpenModel\n     */\n    GetFlatMesh(modelID: number, expressID: number): FlatMesh | Promise<FlatMesh>;\n\n    SetWasmPath(path: string): void | Promise<void>;\n}\n","import { IfcState, pName, PropsNames, Node } from '../../BaseDefinitions';\n\nexport class BasePropertyManager {\n\n    constructor(protected state: IfcState) {\n    }\n\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.psets);\n    }\n\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.type);\n    }\n\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\n        return await this.getProperty(modelID, elementID, recursive, PropsNames.materials);\n    }\n\n    protected async getSpatialNode(modelID: number, node: Node, treeChunks: any, includeProperties?: boolean) {\n        await this.getChildren(modelID, node, treeChunks, PropsNames.aggregates, includeProperties);\n        await this.getChildren(modelID, node, treeChunks, PropsNames.spatial, includeProperties);\n    }\n\n    protected async getChildren(modelID: number, node: Node, treeChunks: any, propNames: pName, includeProperties?: boolean) {\n        const children = treeChunks[node.expressID];\n        if (children == undefined) return;\n        const prop = propNames.key as keyof Node;\n        const nodes: any[] = [];\n        for(let i = 0; i < children.length; i++){\n            const child = children[i];\n            let node = this.newNode(modelID, child);\n            if (includeProperties) {\n                const properties = await this.getItemProperties(modelID, node.expressID) as any;\n                node = { ...properties, ...node };\n            }\n            await this.getSpatialNode(modelID, node, treeChunks, includeProperties);\n            nodes.push(node);\n        }\n        (node[prop] as Node[]) = nodes;\n    }\n\n    protected newNode(modelID: number, id: number) {\n        const typeName = this.getNodeType(modelID, id);\n        return {\n            expressID: id,\n            type: typeName,\n            children: []\n        };\n    }\n\n    protected async getSpatialTreeChunks(modelID: number) {\n        const treeChunks: any = {};\n        await this.getChunks(modelID, treeChunks, PropsNames.aggregates);\n        await this.getChunks(modelID, treeChunks, PropsNames.spatial);\n        return treeChunks;\n    }\n\n    protected saveChunk(chunks: any, propNames: pName, rel: any) {\n        const relating = rel[propNames.relating].value;\n        const related = rel[propNames.related].map((r: any) => r.value);\n        if (chunks[relating] == undefined) {\n            chunks[relating] = related;\n        } else {\n            chunks[relating] = chunks[relating].concat(related);\n        }\n    }\n\n    protected getRelated(rel: any, propNames: pName, IDs: number[]) {\n        const element = rel[propNames.relating];\n        if(!element) {\n            return console.warn(`The object with ID ${rel.expressID} has a broken reference.`);\n        }\n        if (!Array.isArray(element)) IDs.push(element.value);\n        else element.forEach((ele) => IDs.push(ele.value));\n    }\n\n    protected static isRelated(id: number, rel: any, propNames: pName) {\n        const relatedItems = rel[propNames.related];\n        if (Array.isArray(relatedItems)) {\n            const values = relatedItems.map((item) => item.value);\n            return values.includes(id);\n        }\n        return relatedItems.value === id;\n    }\n\n    protected static newIfcProject(id: number) {\n        return {\n            expressID: id,\n            type: 'IFCPROJECT',\n            children: []\n        };\n    }\n\n    async getProperty(modelID: number, elementID: number, recursive = false, propName: pName): Promise<any> {\n    }\n\n    protected async getChunks(modelID: number, chunks: any, propNames: pName): Promise<void> {\n    }\n\n    protected async getItemProperties(modelID: number, expressID: number, recursive = false): Promise<any> {\n    }\n\n    protected getNodeType(modelID: number, id: number): any {\n    }\n}","import { BasePropertyManager } from './BasePropertyManager';\nimport { IFCPROJECT } from 'web-ifc';\nimport { pName } from '../../BaseDefinitions';\nimport { PropertyAPI } from './BaseDefinitions';\n\nexport class WebIfcPropertyManager extends BasePropertyManager  implements PropertyAPI {\n    async getItemProperties(modelID: number, id: number, recursive = false) {\n        return this.state.api.GetLine(modelID, id, recursive);\n    }\n\n    async getHeaderLine(modelID: number, headerType: number) {\n        return this.state.api.GetHeaderLine(modelID, headerType);\n    }\n\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\n        const chunks = await this.getSpatialTreeChunks(modelID);\n        const allLines = await this.state.api.GetLineIDsWithType(modelID, IFCPROJECT);\n        const projectID = allLines.get(0);\n        const project = WebIfcPropertyManager.newIfcProject(projectID);\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\n        return project;\n    }\n\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\n        let items: number[] = [];\n        const lines = await this.state.api.GetLineIDsWithType(modelID, type);\n        for (let i = 0; i < lines.size(); i++) items.push(lines.get(i));\n        if (!verbose) return items;\n        const result: any[] = [];\n        for (let i = 0; i < items.length; i++) {\n            result.push(await this.state.api.GetLine(modelID, items[i]));\n        }\n        return result;\n    }\n\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\n        const propSetIds = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\n        const result: any[] = [];\n        for (let i = 0; i < propSetIds.length; i++) {\n            result.push(await this.state.api.GetLine(modelID, propSetIds[i], recursive));\n        }\n        return result;\n    }\n\n    protected override getNodeType(modelID: number, id: number) {\n        const typeID = this.state.models[modelID].types[id];\n        return this.state.api.GetNameFromTypeCode(typeID);\n    }\n\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\n        const relation = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\n        for (let i = 0; i < relation.size(); i++) {\n            const rel = await this.state.api.GetLine(modelID, relation.get(i), false);\n            this.saveChunk(chunks, propNames, rel);\n        }\n    }\n\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\n        const lines = await this.state.api.GetLineIDsWithType(modelID, propNames.name);\n        const IDs: number[] = [];\n        for (let i = 0; i < lines.size(); i++) {\n            const rel = await this.state.api.GetLine(modelID, lines.get(i));\n            const isRelated = BasePropertyManager.isRelated(id, rel, propNames);\n            if (isRelated) this.getRelated(rel, propNames, IDs);\n        }\n        return IDs;\n    }\n}","import { JSONObject, pName } from '../../BaseDefinitions';\nimport { BasePropertyManager } from './BasePropertyManager';\nimport { IFCPROJECT } from 'web-ifc';\nimport { PropertyAPI } from './BaseDefinitions';\n\nexport class JSONPropertyManager extends BasePropertyManager implements PropertyAPI {\n\n    async getItemProperties(modelID: number, id: number, recursive = false) {\n        return { ...this.state.models[modelID].jsonData[id] };\n    }\n\n    async getHeaderLine(modelID: number) {\n        return {};\n    }\n\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\n        const chunks = await this.getSpatialTreeChunks(modelID);\n        const projectsIDs = await this.getAllItemsOfType(modelID, IFCPROJECT, false);\n        const projectID = projectsIDs[0];\n        const project = JSONPropertyManager.newIfcProject(projectID);\n        await this.getSpatialNode(modelID, project, chunks, includeProperties);\n        return { ...project };\n    }\n\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\n        const data = this.state.models[modelID].jsonData;\n        const typeName = await this.state.api.GetNameFromTypeCode(type);\n        if (!typeName) {\n            throw new Error(`Type not found: ${type}`);\n        }\n        return this.filterItemsByType(data, typeName, verbose);\n    }\n\n    override async getProperty(modelID: number, elementID: number, recursive = false, propName: pName) {\n        const resultIDs = await this.getAllRelatedItemsOfType(modelID, elementID, propName);\n        const result = this.getItemsByID(modelID, resultIDs);\n        if (recursive) {\n            result.forEach(result => this.getReferencesRecursively(modelID, result));\n        }\n        return result;\n    }\n\n    protected override getNodeType(modelID: number, id: number) {\n        return this.state.models[modelID].jsonData[id].type;\n    }\n\n    protected override async getChunks(modelID: number, chunks: any, propNames: pName) {\n        const relation = await this.getAllItemsOfType(modelID, propNames.name, true);\n        relation.forEach(rel => {\n            this.saveChunk(chunks, propNames, rel);\n        });\n    }\n\n    private filterItemsByType(data: { [id: number]: JSONObject }, typeName: string, verbose: boolean) {\n        const result: any[] = [];\n        Object.keys(data).forEach(key => {\n            const numKey = parseInt(key);\n            if (data[numKey].type.toUpperCase() === typeName) {\n                result.push(verbose ? { ...data[numKey] } : numKey);\n            }\n        });\n        return result;\n    }\n\n    private async getAllRelatedItemsOfType(modelID: number, id: number, propNames: pName) {\n        const lines = await this.getAllItemsOfType(modelID, propNames.name, true);\n        const IDs: number[] = [];\n        lines.forEach(line => {\n            const isRelated = JSONPropertyManager.isRelated(id, line, propNames);\n            if (isRelated) this.getRelated(line, propNames, IDs);\n        });\n        return IDs;\n    }\n\n    private getItemsByID(modelID: number, ids: number[]) {\n        const data = this.state.models[modelID].jsonData;\n        const result: any[] = [];\n        ids.forEach(id => result.push({ ...data[id] }));\n        return result;\n    }\n\n    private getReferencesRecursively(modelID: number, jsonObject: any) {\n        if (jsonObject == undefined) return;\n        const keys = Object.keys(jsonObject);\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            this.getJSONItem(modelID, jsonObject, key);\n        }\n    }\n\n    private getJSONItem(modelID: number, jsonObject: any, key: string) {\n        if (Array.isArray(jsonObject[key])) {\n            return this.getMultipleJSONItems(modelID, jsonObject, key);\n        }\n        if (jsonObject[key] && jsonObject[key].type === 5) {\n            jsonObject[key] = this.getItemsByID(modelID, [jsonObject[key].value])[0];\n            this.getReferencesRecursively(modelID, jsonObject[key]);\n        }\n    }\n\n    private getMultipleJSONItems(modelID: number, jsonObject: any, key: string) {\n        jsonObject[key] = jsonObject[key].map((item: any) => {\n            if (item.type === 5) {\n                item = this.getItemsByID(modelID, [item.value])[0];\n                this.getReferencesRecursively(modelID, item);\n            }\n            return item;\n        });\n    }\n}","export const geometryTypes = new Set<number>([\n  1123145078, 574549367, 1675464909, 2059837836, 3798115385, 32440307, 3125803723, 3207858831,\n  2740243338, 2624227202, 4240577450, 3615266464, 3724593414, 220341763, 477187591, 1878645084,\n  1300840506, 3303107099, 1607154358, 1878645084, 846575682, 1351298697, 2417041796, 3049322572,\n  3331915920, 1416205885, 776857604, 3285139300, 3958052878, 2827736869, 2732653382, 673634403,\n  3448662350, 4142052618, 2924175390, 803316827, 2556980723, 1809719519, 2205249479, 807026263,\n  3737207727, 1660063152, 2347385850, 3940055652, 2705031697, 3732776249, 2485617015, 2611217952,\n  1704287377, 2937912522, 2770003689, 1281925730, 1484403080, 3448662350, 4142052618, 3800577675,\n  4006246654, 3590301190, 1383045692, 2775532180, 2047409740, 370225590, 3593883385, 2665983363,\n  4124623270, 812098782, 3649129432, 987898635, 1105321065, 3510044353, 1635779807, 2603310189,\n  3406155212, 1310608509, 4261334040, 2736907675, 3649129432, 1136057603, 1260505505, 4182860854,\n  2713105998, 2898889636, 59481748, 3749851601, 3486308946, 3150382593, 1062206242, 3264961684,\n  15328376, 1485152156, 370225590, 1981873012, 2859738748, 45288368, 2614616156, 2732653382,\n  775493141, 2147822146, 2601014836, 2629017746, 1186437898, 2367409068, 1213902940, 3632507154,\n  3900360178, 476780140, 1472233963, 2804161546, 3008276851, 738692330, 374418227, 315944413,\n  3905492369, 3570813810, 2571569899, 178912537, 2294589976, 1437953363, 2133299955, 572779678,\n  3092502836, 388784114, 2624227202, 1425443689, 3057273783, 2347385850, 1682466193, 2519244187,\n  2839578677, 3958567839, 2513912981, 2830218821, 427810014\n]);\n","import {IFCBUILDING} from 'web-ifc';\nimport {WebIfcAPI} from \"../../BaseDefinitions\";\nimport {geometryTypes} from \"./GeometryTypes\";\n\nexport class PropertySerializer {\n\n  dispose() {\n    (this.webIfc as any) = null;\n  }\n\n  constructor( private webIfc: WebIfcAPI) {\n  }\n\n  /**\n   * Serializes all the properties of an IFC (exluding the geometry) into an array of Blobs.\n   * This is useful for populating databases with IFC data.\n   * @modelID ID of the IFC model whose properties to extract.\n   * @maxSize (optional) maximum number of entities for each Blob. If not defined, it's infinite (only one Blob will be created).\n   * @event (optional) callback called every time a 10% of entities are serialized into Blobs.\n   */\n  async serializeAllProperties(\n    modelID: number,\n    maxSize?: number,\n    event?: (progress: number, total: number) => void\n  ) {\n    const blobs: Blob[] = [];\n    await this.getPropertiesAsBlobs(modelID, blobs, maxSize, event);\n    return blobs;\n  }\n\n  private async getPropertiesAsBlobs(\n    modelID: number,\n    blobs: Blob[],\n    maxSize?: number,\n    event?: (progress: number, total: number) => void\n  ) {\n    const geometriesIDs = await this.getAllGeometriesIDs(modelID);\n    let properties = await this.initializePropertiesObject(modelID);\n    const allLinesIDs = await this.webIfc!.GetAllLines(modelID);\n    const linesCount = allLinesIDs.size();\n    let lastEvent = 0.1;\n\n    let counter = 0;\n    for (let i = 0; i < linesCount; i++) {\n      const id = allLinesIDs.get(i);\n      if (!geometriesIDs.has(id)) {\n        // eslint-disable-next-line no-await-in-loop\n        await this.getItemProperty(modelID, id, properties);\n        counter++;\n      }\n      if (maxSize && counter > maxSize) {\n        blobs.push(new Blob([JSON.stringify(properties)], { type: 'application/json' }));\n        properties = {};\n        counter = 0;\n      }\n      if (event && i / linesCount > lastEvent) {\n        event(i, linesCount);\n        lastEvent += 0.1;\n      }\n    }\n\n    blobs.push(new Blob([JSON.stringify(properties)], { type: 'application/json' }));\n  }\n\n  private async getItemProperty(modelID: number, id: number, properties: any) {\n    try {\n      const props = await this.webIfc!.GetLine(modelID, id);\n      if (props.type) {\n        props.type = this.webIfc!.GetNameFromTypeCode(props.type);\n      }\n      this.formatItemProperties(props);\n      properties[id] = props;\n    } catch (e) {\n      console.log(`There was a problem getting the properties of the item with ID ${id}`);\n    }\n  }\n\n  private formatItemProperties(props: any) {\n    Object.keys(props).forEach((key) => {\n      const value = props[key];\n      if (value && value.value !== undefined) props[key] = value.value;\n      else if (Array.isArray(value))\n        props[key] = value.map((item) => {\n          if (item && item.value) return item.value;\n          return item;\n        });\n    });\n  }\n\n  private async initializePropertiesObject(modelID: number): Promise<any> {\n    return {\n      coordinationMatrix: await this.webIfc!.GetCoordinationMatrix(modelID),\n      globalHeight: await this.getBuildingHeight(modelID)\n    };\n  }\n\n  private async getBuildingHeight(modelID: number) {\n    const building = await this.getBuilding(modelID);\n    let placement: any;\n    const siteReference = building.ObjectPlacement.PlacementRelTo;\n    if (siteReference) placement = siteReference.RelativePlacement.Location;\n    else placement = building.ObjectPlacement.RelativePlacement.Location;\n    const transform = placement.Coordinates.map((coord: any) => coord.value);\n    return transform[2];\n  }\n\n  private async getBuilding(modelID: number) {\n    const allBuildingsIDs = await this.webIfc.GetLineIDsWithType(modelID, IFCBUILDING);\n    const buildingID = allBuildingsIDs.get(0);\n    return this.webIfc.GetLine(modelID, buildingID, true);\n  }\n\n  private async getAllGeometriesIDs(modelID: number) {\n    const geometriesIDs = new Set<number>();\n    const geomTypesArray = Array.from(geometryTypes);\n    for (let i = 0; i < geomTypesArray.length; i++) {\n      const category = geomTypesArray[i];\n      // eslint-disable-next-line no-await-in-loop\n      const ids = await this.webIfc!.GetLineIDsWithType(modelID, category);\n      const idsSize = ids.size();\n      for (let j = 0; j < idsSize; j++) {\n        geometriesIDs.add(ids.get(j));\n      }\n    }\n    return geometriesIDs;\n  }\n}\n","import {\n    IdAttrName\n} from '../../BaseDefinitions';\nimport { IfcState } from '../../BaseDefinitions';\nimport { BufferAttribute, BufferGeometry } from 'three';\nimport { WebIfcPropertyManager } from './WebIfcPropertyManager';\nimport { JSONPropertyManager } from './JSONPropertyManager';\nimport { PropertyManagerAPI, PropertyAPI } from './BaseDefinitions';\nimport {PropertySerializer} from \"./PropertySerializer\";\n\n/**\n * Contains the logic to get the properties of the items within an IFC model.\n */\nexport class PropertyManager implements PropertyManagerAPI {\n    serializer?: PropertySerializer;\n\n    private readonly webIfcProps: WebIfcPropertyManager;\n    private readonly jsonProps: JSONPropertyManager;\n    private currentProps: PropertyAPI;\n\n    constructor(private state: IfcState) {\n        this.webIfcProps = new WebIfcPropertyManager(state);\n        this.jsonProps = new JSONPropertyManager(state);\n        this.currentProps = this.webIfcProps;\n        this.serializer = new PropertySerializer(this.state.api);\n    }\n\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\n        const geoIndex = geometry.index.array;\n        const bufferAttr = geometry.attributes[IdAttrName] as BufferAttribute;\n        return bufferAttr.getX(geoIndex[3 * faceIndex]);\n    }\n\n    async getHeaderLine(modelID: number, headerType: number) {\n        this.updateCurrentProps();\n        return this.currentProps.getHeaderLine(modelID, headerType);\n    }\n\n    async getItemProperties(modelID: number, elementID: number, recursive = false) {\n        this.updateCurrentProps();\n        return this.currentProps.getItemProperties(modelID, elementID, recursive);\n    }\n\n    async getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\n        this.updateCurrentProps();\n        return this.currentProps.getAllItemsOfType(modelID, type, verbose);\n    }\n\n    async getPropertySets(modelID: number, elementID: number, recursive = false) {\n        this.updateCurrentProps();\n        return this.currentProps.getPropertySets(modelID, elementID, recursive);\n    }\n\n    async getTypeProperties(modelID: number, elementID: number, recursive = false) {\n        this.updateCurrentProps();\n        return this.currentProps.getTypeProperties(modelID, elementID, recursive);\n    }\n\n    async getMaterialsProperties(modelID: number, elementID: number, recursive = false) {\n        this.updateCurrentProps();\n        return this.currentProps.getMaterialsProperties(modelID, elementID, recursive);\n    }\n\n    async getSpatialStructure(modelID: number, includeProperties?: boolean) {\n        this.updateCurrentProps();\n        if (!this.state.useJSON && includeProperties) {\n            console.warn('Including properties in getSpatialStructure with the JSON workflow disabled can lead to poor performance.');\n        }\n        return await this.currentProps.getSpatialStructure(modelID, includeProperties);\n    }\n\n    private updateCurrentProps() {\n        this.currentProps = this.state.useJSON ? this.jsonProps : this.webIfcProps;\n    }\n\n}\n","import { IfcState } from '../BaseDefinitions';\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\n\n/**\n * Contains the logic to manage the type (e. g. IfcWall, IfcWindow, IfcDoor) of\n * all the items within an IFC file.\n */\nexport class TypeManager {\n\n    constructor(private state: IfcState) {\n        this.state = state;\n    }\n\n    async getAllTypes(worker?: IFCWorkerHandler){\n\t\tfor (let modelID in this.state.models) {\n\t\t\tif (this.state.models.hasOwnProperty(modelID)) {\n\t\t\t\tconst types = this.state.models[modelID].types;\n\t\t\t\tif (Object.keys(types).length == 0) {\n\t\t\t\t\tawait this.getAllTypesOfModel(parseInt(modelID), worker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n    }\n\n    async getAllTypesOfModel(modelID: number, worker?: IFCWorkerHandler) {\n        const result = {};\n        const elements = await this.state.api.GetIfcEntityList(modelID);\n        for(let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            const lines = await this.state.api.GetLineIDsWithType(modelID, element);\n            const size = lines.size();\n            //@ts-ignore\n            for (let i = 0; i < size; i++) result[lines.get(i)] = element;\n        }\n        if(this.state.worker.active && worker) {\n            // TODO: When using web workers, store the type information there and request it to the worker\n            // Otherwise the type data is stored in 2 different places at the same time\n            await worker.workerState.updateModelStateTypes(modelID, result);\n        }\n        this.state.models[modelID].types = result;\n    }\n}\n","import { BufferGeometry, Mesh } from 'three';\n\nexport class BvhManager {\n    private computeBoundsTree?: any;\n    private disposeBoundsTree?: any;\n    private acceleratedRaycast?: any;\n\n    initializeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\n        this.computeBoundsTree = computeBoundsTree;\n        this.disposeBoundsTree = disposeBoundsTree;\n        this.acceleratedRaycast = acceleratedRaycast;\n        this.setupThreeMeshBVH();\n    }\n\n    applyThreeMeshBVH(geometry: BufferGeometry) {\n        if (this.computeBoundsTree)\n            //@ts-ignore\n            geometry.computeBoundsTree();\n    }\n\n    private setupThreeMeshBVH() {\n        if (!this.computeBoundsTree || !this.disposeBoundsTree || !this.acceleratedRaycast) return;\n        //@ts-ignore\n        BufferGeometry.prototype.computeBoundsTree = this.computeBoundsTree;\n        //@ts-ignore\n        BufferGeometry.prototype.disposeBoundsTree = this.disposeBoundsTree;\n        Mesh.prototype.raycast = this.acceleratedRaycast;\n    }\n}","import { IfcState, WebIfcAPI } from '../BaseDefinitions';\n\nexport interface IfcWorkerAPI {\n    post: (data: any) => void;\n    initializeAPI: (api: WebIfcAPI) => void;\n    state?: IfcState;\n    postCallback: (data: any, result: any, serializer?: any) => void;\n}\n\nexport enum WorkerActions {\n    // Worker State Actions\n    updateStateUseJson = 'updateStateUseJson',\n    updateStateWebIfcSettings = 'updateStateWebIfcSettings',\n    updateModelStateTypes = 'updateModelStateTypes',\n    updateModelStateJsonData = 'updateModelStateJsonData',\n    loadJsonDataFromWorker = 'loadJsonDataFromWorker',\n    dispose = 'dispose',\n\n    // WebIFC Actions\n    Close = 'Close',\n    DisposeWebIfc = 'DisposeWebIfc',\n    Init = 'Init',\n    OpenModel = 'OpenModel',\n    CreateModel = 'CreateModel',\n    ExportFileAsIFC = 'ExportFileAsIFC',\n    GetGeometry = 'GetGeometry',\n    GetLine = 'GetLine',\n    GetAndClearErrors = 'GetAndClearErrors',\n    WriteLine = 'WriteLine',\n    FlattenLine = 'FlattenLine',\n    GetRawLineData = 'GetRawLineData',\n    WriteRawLineData = 'WriteRawLineData',\n    GetLineIDsWithType = 'GetLineIDsWithType',\n    GetAllLines = 'GetAllLines',\n    SetGeometryTransformation = 'SetGeometryTransformation',\n    GetCoordinationMatrix = 'GetCoordinationMatrix',\n    GetVertexArray = 'GetVertexArray',\n    GetIndexArray = 'GetIndexArray',\n    getSubArray = 'getSubArray',\n    CloseModel = 'CloseModel',\n    StreamAllMeshes = 'StreamAllMeshes',\n    StreamAllMeshesWithTypes = 'StreamAllMeshesWithTypes',\n    IsModelOpen = 'IsModelOpen',\n    LoadAllGeometry = 'LoadAllGeometry',\n    GetFlatMesh = 'GetFlatMesh',\n    SetWasmPath = 'SetWasmPath',\n    GetNameFromTypeCode = 'GetNameFromTypeCode',\n    GetIfcEntityList = 'GetIfcEntityList',\n    GetTypeCodeFromName ='GetTypeCodeFromName',\n\n    // Parser\n    parse = 'parse',\n    setupOptionalCategories = 'setupOptionalCategories',\n\n    // Properties\n    getExpressId = 'getExpressId',\n    initializeProperties = 'initializeProperties',\n    getAllItemsOfType = 'getAllItemsOfType',\n    getItemProperties = 'getItemProperties',\n    getMaterialsProperties = 'getMaterialsProperties',\n    getPropertySets = 'getPropertySets',\n    getSpatialStructure = 'getSpatialStructure',\n    getTypeProperties = 'getTypeProperties',\n    getHeaderLine = 'getHeaderLine',\n}\n\nexport enum WorkerAPIs {\n    workerState = 'workerState',\n    webIfc = 'webIfc',\n    properties = 'properties',\n    parser = 'parser',\n}\n\nexport interface IfcEventData {\n    worker: WorkerAPIs;\n    action: WorkerActions;\n    args: any;\n    id: number;\n    result: any;\n    onProgress: boolean;\n}\n\nexport interface RootWorker {\n    [WorkerAPIs.workerState]: WorkerStateAPI;\n    [WorkerAPIs.webIfc]: WebIfcWorkerAPI;\n    [WorkerAPIs.properties]: PropertyWorkerAPI;\n}\n\nexport interface BaseWorkerAPI {\n    API: WorkerAPIs;\n}\n\nexport type IfcWorkerEventHandler = (data: IfcEventData) => void;\n\nexport interface WorkerStateAPI extends BaseWorkerAPI {\n    [WorkerActions.updateStateUseJson]: IfcWorkerEventHandler;\n    [WorkerActions.updateStateWebIfcSettings]: IfcWorkerEventHandler;\n    [WorkerActions.updateModelStateTypes]: IfcWorkerEventHandler;\n    [WorkerActions.updateModelStateJsonData]: IfcWorkerEventHandler;\n    [WorkerActions.loadJsonDataFromWorker]: IfcWorkerEventHandler;\n    [WorkerActions.dispose]: IfcWorkerEventHandler;\n}\n\nexport interface PropertyWorkerAPI extends BaseWorkerAPI {\n    [WorkerActions.getAllItemsOfType]: IfcWorkerEventHandler;\n    [WorkerActions.getItemProperties]: IfcWorkerEventHandler;\n    [WorkerActions.getMaterialsProperties]: IfcWorkerEventHandler;\n    [WorkerActions.getPropertySets]: IfcWorkerEventHandler;\n    [WorkerActions.getSpatialStructure]: IfcWorkerEventHandler;\n    [WorkerActions.getTypeProperties]: IfcWorkerEventHandler;\n}\n\nexport interface ParserWorkerAPI extends BaseWorkerAPI {\n    [WorkerActions.parse]: IfcWorkerEventHandler;\n    [WorkerActions.setupOptionalCategories]: IfcWorkerEventHandler;\n}\n\nexport interface WebIfcWorkerAPI extends BaseWorkerAPI {\n    [WorkerActions.Init]: IfcWorkerEventHandler;\n    [WorkerActions.Close]: IfcWorkerEventHandler;\n    [WorkerActions.DisposeWebIfc]: IfcWorkerEventHandler;\n    [WorkerActions.OpenModel]: IfcWorkerEventHandler;\n    [WorkerActions.CreateModel]: IfcWorkerEventHandler;\n    [WorkerActions.ExportFileAsIFC]: IfcWorkerEventHandler;\n    [WorkerActions.GetGeometry]: IfcWorkerEventHandler;\n    [WorkerActions.GetLine]: IfcWorkerEventHandler;\n    [WorkerActions.GetAndClearErrors]: IfcWorkerEventHandler;\n    [WorkerActions.WriteLine]: IfcWorkerEventHandler;\n    [WorkerActions.FlattenLine]: IfcWorkerEventHandler;\n    [WorkerActions.GetRawLineData]: IfcWorkerEventHandler;\n    [WorkerActions.WriteRawLineData]: IfcWorkerEventHandler;\n    [WorkerActions.GetLineIDsWithType]: IfcWorkerEventHandler;\n    [WorkerActions.GetAllLines]: IfcWorkerEventHandler;\n    [WorkerActions.SetGeometryTransformation]: IfcWorkerEventHandler;\n    [WorkerActions.GetCoordinationMatrix]: IfcWorkerEventHandler;\n    [WorkerActions.GetVertexArray]: IfcWorkerEventHandler;\n    [WorkerActions.GetIndexArray]: IfcWorkerEventHandler;\n    [WorkerActions.getSubArray]: IfcWorkerEventHandler;\n    [WorkerActions.CloseModel]: IfcWorkerEventHandler;\n    [WorkerActions.StreamAllMeshes]: IfcWorkerEventHandler;\n    [WorkerActions.StreamAllMeshesWithTypes]: IfcWorkerEventHandler;\n    [WorkerActions.IsModelOpen]: IfcWorkerEventHandler;\n    [WorkerActions.LoadAllGeometry]: IfcWorkerEventHandler;\n    [WorkerActions.GetFlatMesh]: IfcWorkerEventHandler;\n    [WorkerActions.SetWasmPath]: IfcWorkerEventHandler;\n    [WorkerActions.GetNameFromTypeCode]: IfcWorkerEventHandler;\n    [WorkerActions.GetIfcEntityList]: IfcWorkerEventHandler;\n    [WorkerActions.GetTypeCodeFromName]: IfcWorkerEventHandler;\n}\n\nexport interface SerializedVector {\n    [key: number]: any;\n\n    size: number;\n}\n\nexport interface SerializedIfcGeometry {\n    GetVertexData: number;\n    GetVertexDataSize: number;\n    GetIndexData: number;\n    GetIndexDataSize: number;\n}\n\nexport interface SerializedFlatMesh {\n    geometries: SerializedVector;\n    expressID: number;\n}\n\nexport const ErrorStateNotAvailable = 'The state of the worker does not exist';\nexport const ErrorRootStateNotAvailable = 'The root worker does not have any state';\nexport const ErrorPropertiesNotAvailable = 'Error: Properties not available from web worker';\nexport const ErrorParserNotAvailable = 'Error: Parser not available from web worker';\nexport const ErrorBadJsonPath = 'Error: Model not available from web worker';\nexport const ErrorBadJson = 'Error: The given Json could not be read as a JS object';","import { SerializedVector } from '../BaseDefinitions';\nimport { Vector as WebIfcVector } from 'web-ifc';\n\nexport class Vector<T> implements WebIfcVector<T> {\n    private readonly _size: number;\n    private _data: { [key: number]: T } = {};\n\n    constructor(vector: SerializedVector) {\n        this._size = vector.size;\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\n        keys.forEach((key) => this._data[key] = vector[key]);\n    }\n\n    size() {\n        return this._size;\n    }\n\n    get(index: number) {\n        return this._data[index];\n    }\n}","import { SerializedIfcGeometry } from '../BaseDefinitions';\nimport { IfcGeometry as WebIfcIfcGeometry } from 'web-ifc';\n\nexport class IfcGeometry implements WebIfcIfcGeometry {\n    private readonly _GetVertexData: number;\n    private readonly _GetVertexDataSize: number;\n    private readonly _GetIndexData: number;\n    private readonly _GetIndexDataSize: number;\n\n    constructor(vector: SerializedIfcGeometry) {\n        this._GetVertexData = vector.GetVertexData;\n        this._GetVertexDataSize = vector.GetVertexDataSize;\n        this._GetIndexData = vector.GetIndexData;\n        this._GetIndexDataSize = vector.GetIndexDataSize;\n    }\n\n    GetVertexData() {\n        return this._GetVertexData;\n    }\n\n    GetVertexDataSize() {\n        return this._GetVertexDataSize;\n    }\n\n    GetIndexData() {\n        return this._GetIndexData;\n    }\n\n    GetIndexDataSize() {\n        return this._GetIndexDataSize;\n    }\n}","import { SerializedFlatMesh } from '../BaseDefinitions';\nimport { FlatMesh as WebIfcFlatMesh, PlacedGeometry } from 'web-ifc';\nimport { Vector } from './Vector';\nimport { Serializer } from './Serializer';\n\nexport class FlatMesh implements WebIfcFlatMesh {\n    geometries: Vector<PlacedGeometry>;\n    expressID: number;\n\n    constructor(serializer: Serializer, flatMesh: SerializedFlatMesh) {\n        this.expressID = flatMesh.expressID;\n        this.geometries = serializer.reconstructVector(flatMesh.geometries);\n    }\n}","import { SerializedVector } from '../BaseDefinitions';\nimport { FlatMesh as WebIfcFlatMesh, Vector as WebIfcVector } from 'web-ifc';\nimport { Serializer } from './Serializer';\n\nexport class FlatMeshVector implements WebIfcVector<WebIfcFlatMesh> {\n    private readonly _size: number;\n    private _data: { [key: number]: WebIfcFlatMesh } = {};\n\n    constructor(serializer: Serializer, vector: SerializedVector) {\n        this._size = vector.size;\n        const keys = Object.keys(vector).filter((key) => key.indexOf('size') === -1).map(key => parseInt(key));\n        keys.forEach(key => this._data[key] = serializer.reconstructFlatMesh(vector[key]));\n    }\n\n    size() {\n        return this._size;\n    }\n\n    get(index: number) {\n        return this._data[index];\n    }\n}","import {Color, DoubleSide, MeshLambertMaterial} from 'three';\n\nexport class SerializedMaterial {\n    color: number[];\n    opacity: number;\n    transparent: boolean;\n\n    constructor(material: MeshLambertMaterial) {\n        this.color = [material.color.r, material.color.g, material.color.b];\n        this.opacity = material.opacity;\n        this.transparent = material.transparent;\n    }\n}\n\nexport class MaterialReconstructor {\n    static new(material: SerializedMaterial) {\n        return new MeshLambertMaterial({\n            color: new Color(material.color[0], material.color[1], material.color[2]),\n            opacity: material.opacity,\n            transparent: material.transparent,\n            side: DoubleSide\n        })\n    }\n}","import { BufferAttribute, BufferGeometry } from 'three';\n\nexport class SerializedGeometry {\n    position: ArrayLike<number>;\n    normal: ArrayLike<number>;\n    expressID: ArrayLike<number>;\n    index: ArrayLike<number>;\n    groups: { start: number, count: number, materialIndex?: number }[];\n\n    constructor(geometry: BufferGeometry) {\n        this.position = (geometry.attributes.position as BufferAttribute)?.array || [];\n        this.normal = (geometry.attributes.normal as BufferAttribute)?.array || [];\n        this.expressID = (geometry.attributes.expressID as BufferAttribute)?.array || [];\n        this.index = geometry.index?.array || [];\n        this.groups = geometry.groups;\n    }\n}\n\nexport class GeometryReconstructor {\n    static new(serialized: SerializedGeometry) {\n        const geom = new BufferGeometry();\n        GeometryReconstructor.set(geom, 'expressID', new Uint32Array(serialized.expressID), 1);\n        GeometryReconstructor.set(geom, 'position', new Float32Array(serialized.position), 3);\n        GeometryReconstructor.set(geom, 'normal', new Float32Array(serialized.normal), 3);\n        geom.setIndex(Array.from(serialized.index));\n        geom.groups = serialized.groups;\n        return geom;\n    }\n\n    private static set(geom: BufferGeometry, name: string, data: ArrayLike<number>, size: number) {\n        if(data.length > 0) {\n            geom.setAttribute(name, new BufferAttribute(data, size));\n        }\n    }\n}","import { IFCModel } from '../../components/IFCModel';\nimport { Material, MeshLambertMaterial } from 'three';\nimport { MaterialReconstructor, SerializedMaterial } from './Material';\nimport { GeometryReconstructor, SerializedGeometry } from './Geometry';\n\nexport class SerializedMesh {\n\n    modelID: number;\n    geometry: SerializedGeometry;\n    materials: SerializedMaterial [] = [];\n\n    constructor(model: IFCModel) {\n        this.modelID = model.modelID;\n        this.geometry = new SerializedGeometry(model.geometry);\n        if (Array.isArray(model.material)) {\n            model.material.forEach(mat => {\n                this.materials.push(new SerializedMaterial(mat as MeshLambertMaterial));\n            });\n        } else {\n            this.materials.push(new SerializedMaterial(model.material as MeshLambertMaterial));\n        }\n    }\n}\n\nexport class MeshReconstructor {\n\n    static new(serialized: SerializedMesh) {\n        const model = new IFCModel();\n        model.modelID = serialized.modelID;\n        model.geometry = GeometryReconstructor.new(serialized.geometry);\n        MeshReconstructor.getMaterials(serialized, model);\n        return model;\n    }\n\n    private static getMaterials(serialized: SerializedMesh, model: IFCModel) {\n        model.material = [];\n        const mats = model.material as Material[];\n        serialized.materials.forEach(mat => {\n            mats.push(MaterialReconstructor.new(mat));\n        });\n    }\n}","import { Vector as WebIfcVector, IfcGeometry as WebIfcIfcGeometry, FlatMesh as WebIfcFlatMesh } from 'web-ifc';\nimport { SerializedFlatMesh, SerializedIfcGeometry, SerializedVector } from '../BaseDefinitions';\nimport { Vector } from './Vector';\nimport { IfcGeometry } from './IfcGeometry';\nimport { FlatMesh } from './FlatMesh';\nimport { FlatMeshVector } from './FlatMeshVector';\nimport { IFCModel } from '../../components/IFCModel';\nimport { MeshReconstructor, SerializedMesh } from './Mesh';\n\nexport class Serializer {\n\n    serializeVector<T>(vector: WebIfcVector<T>) {\n        const size = vector.size();\n        const serialized: SerializedVector = { size };\n        for (let i = 0; i < size; i++) {\n            serialized[i] = vector.get(i);\n        }\n        return serialized;\n    }\n\n    reconstructVector(vector: SerializedVector): Vector<any> {\n        return new Vector(vector);\n    }\n\n    serializeIfcGeometry(geometry: WebIfcIfcGeometry) {\n        const GetVertexData = geometry.GetVertexData();\n        const GetVertexDataSize = geometry.GetVertexDataSize();\n        const GetIndexData = geometry.GetIndexData();\n        const GetIndexDataSize = geometry.GetIndexDataSize();\n        return {\n            GetVertexData,\n            GetVertexDataSize,\n            GetIndexData,\n            GetIndexDataSize\n        } as SerializedIfcGeometry;\n    }\n\n    reconstructIfcGeometry(geometry: SerializedIfcGeometry) {\n        return new IfcGeometry(geometry);\n    }\n\n    serializeFlatMesh(flatMesh: WebIfcFlatMesh) {\n        return {\n            expressID: flatMesh.expressID,\n            geometries: this.serializeVector(flatMesh.geometries)\n        } as SerializedFlatMesh;\n    }\n\n    reconstructFlatMesh(flatMesh: SerializedFlatMesh) {\n        return new FlatMesh(this, flatMesh);\n    }\n\n    serializeFlatMeshVector(vector: WebIfcVector<WebIfcFlatMesh>) {\n        const size = vector.size();\n        const serialized: SerializedVector = { size };\n        for (let i = 0; i < size; i++) {\n            const flatMesh = vector.get(i);\n            serialized[i] = this.serializeFlatMesh(flatMesh);\n        }\n        return serialized;\n    }\n\n    reconstructFlatMeshVector(vector: SerializedVector): WebIfcVector<WebIfcFlatMesh> {\n        return new FlatMeshVector(this, vector);\n    }\n\n    serializeIfcModel(model: IFCModel) {\n        return new SerializedMesh(model);\n    }\n\n    reconstructIfcModel(model: SerializedMesh) {\n        return MeshReconstructor.new(model);\n    }\n}","import { PropertyManagerAPI } from '../../components/properties/BaseDefinitions';\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\nimport { BufferAttribute, BufferGeometry } from 'three';\nimport { IdAttrName } from '../../BaseDefinitions';\n\nexport class PropertyHandler implements PropertyManagerAPI {\n\n    API = WorkerAPIs.properties;\n\n    constructor(private handler: IFCWorkerHandler) {\n    }\n\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\n        if (!geometry.index) throw new Error('Geometry does not have index information.');\n        const geoIndex = geometry.index.array;\n        const bufferAttr = geometry.attributes[IdAttrName] as BufferAttribute;\n        return bufferAttr.getX(geoIndex[3 * faceIndex]);\n    }\n\n    getHeaderLine(modelID: number, headerType: number): Promise<any[]> {\n        return this.handler.request(this.API, WorkerActions.getHeaderLine, { modelID, headerType });\n    }\n\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean): Promise<any[]> {\n        return this.handler.request(this.API, WorkerActions.getAllItemsOfType, { modelID, type, verbose });\n    }\n\n    getItemProperties(modelID: number, elementID: number, recursive: boolean): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.getItemProperties, { modelID, elementID, recursive });\n    }\n\n    getMaterialsProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\n        return this.handler.request(this.API, WorkerActions.getMaterialsProperties, { modelID, elementID, recursive });\n    }\n\n    getPropertySets(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\n        return this.handler.request(this.API, WorkerActions.getPropertySets, { modelID, elementID, recursive });\n    }\n\n    getTypeProperties(modelID: number, elementID: number, recursive: boolean): Promise<any[]> {\n        return this.handler.request(this.API, WorkerActions.getTypeProperties, { modelID, elementID, recursive });\n    }\n\n    getSpatialStructure(modelID: number, includeProperties?: boolean): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.getSpatialStructure, { modelID, includeProperties });\n    }\n}","import { WebIfcAPI } from '../../BaseDefinitions';\nimport {\n    \n    SerializedFlatMesh,\n    SerializedIfcGeometry,\n    SerializedVector,\n    WorkerActions,\n    WorkerAPIs\n} from '../BaseDefinitions';\n\nimport { NewIfcModel, FlatMesh, IfcGeometry, LoaderError, LoaderSettings, RawLineData, Vector } from 'web-ifc';\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\nimport { Serializer } from '../serializer/Serializer';\n\nexport class WebIfcHandler implements WebIfcAPI {\n\n    wasmModule: any;\n    API = WorkerAPIs.webIfc;\n\n    constructor(private handler: IFCWorkerHandler, private serializer: Serializer) {\n    }\n\n    async Init(): Promise<void> {\n        this.wasmModule = true;\n        return this.handler.request(this.API, WorkerActions.Init);\n    }\n\n    async OpenModel(data:  string | Uint8Array, settings?: LoaderSettings): Promise<number> {\n        return this.handler.request(this.API, WorkerActions.OpenModel, { data, settings });\n    }\n\n    async CreateModel(model: NewIfcModel, settings?: LoaderSettings): Promise<number> {\n        return this.handler.request(this.API, WorkerActions.CreateModel, { model, settings });\n    }\n\n    async ExportFileAsIFC(modelID: number): Promise<Uint8Array> {\n        return this.handler.request(this.API, WorkerActions.ExportFileAsIFC, { modelID });\n    }\n\n    async GetHeaderLine(modelID: number, headerType: number): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.getHeaderLine, { modelID, headerType });\n    }\n\n    async GetGeometry(modelID: number, geometryExpressID: number): Promise<IfcGeometry> {\n        this.handler.serializeHandlers[this.handler.requestID] = (geom: SerializedIfcGeometry) => {\n            return this.serializer.reconstructIfcGeometry(geom);\n        }\n        return this.handler.request(this.API, WorkerActions.GetGeometry, { modelID, geometryExpressID });\n    }\n\n    async GetLine(modelID: number, expressID: number, flatten?: boolean): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.GetLine, { modelID, expressID, flatten });\n    }\n\n    async GetAndClearErrors(modelID: number): Promise<Vector<LoaderError>> {\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\n            return this.serializer.reconstructVector(vector);\n        }\n        return this.handler.request(this.API, WorkerActions.GetAndClearErrors, { modelID });\n    }\n\n    async GetNameFromTypeCode(type:number): Promise<string> {\n        return this.handler.request(this.API, WorkerActions.GetNameFromTypeCode, { type });\n    } \n\n    async GetIfcEntityList(modelID: number) : Promise<number[]> {\n        return this.handler.request(this.API, WorkerActions.GetIfcEntityList, { modelID });\n    }\n\n    async GetTypeCodeFromName(typeName:string): Promise<number> {\n         return this.handler.request(this.API, WorkerActions.GetTypeCodeFromName, { typeName });\n    }\n\n    async WriteLine(modelID: number, lineObject: any): Promise<void> {\n        return this.handler.request(this.API, WorkerActions.WriteLine, { modelID, lineObject });\n    }\n\n    async FlattenLine(modelID: number, line: any): Promise<void> {\n        return this.handler.request(this.API, WorkerActions.FlattenLine, { modelID, line });\n    }\n\n    async GetRawLineData(modelID: number, expressID: number): Promise<RawLineData> {\n        return this.handler.request(this.API, WorkerActions.GetRawLineData, { modelID, expressID });\n    }\n\n    async WriteRawLineData(modelID: number, data: RawLineData): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.WriteRawLineData, { modelID, data });\n    }\n\n    async GetLineIDsWithType(modelID: number, type: number): Promise<Vector<number>> {\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\n            return this.serializer.reconstructVector(vector);\n        }\n        return this.handler.request(this.API, WorkerActions.GetLineIDsWithType, { modelID, type });\n    }\n\n    async GetAllLines(modelID: number): Promise<Vector<number>> {\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\n            return this.serializer.reconstructVector(vector);\n        }\n        return this.handler.request(this.API, WorkerActions.GetAllLines, { modelID });\n    }\n\n    async SetGeometryTransformation(modelID: number, transformationMatrix: number[]): Promise<void> {\n        return this.handler.request(this.API, WorkerActions.SetGeometryTransformation, {\n            modelID,\n            transformationMatrix\n        });\n    }\n\n    async GetCoordinationMatrix(modelID: number): Promise<number[]> {\n        return this.handler.request(this.API, WorkerActions.GetCoordinationMatrix, { modelID });\n    }\n\n    async GetVertexArray(ptr: number, size: number): Promise<Float32Array> {\n        return this.handler.request(this.API, WorkerActions.GetVertexArray, { ptr, size });\n    }\n\n    async GetIndexArray(ptr: number, size: number): Promise<Uint32Array> {\n        return this.handler.request(this.API, WorkerActions.GetIndexArray, { ptr, size });\n    }\n\n    async getSubArray(heap: any, startPtr: any, sizeBytes: any): Promise<any> {\n        return this.handler.request(this.API, WorkerActions.getSubArray, { heap, startPtr, sizeBytes });\n    }\n\n    async CloseModel(modelID: number): Promise<void> {\n        return this.handler.request(this.API, WorkerActions.CloseModel, { modelID });\n    }\n\n    async StreamAllMeshes(modelID: number, meshCallback: (mesh: FlatMesh) => void): Promise<void> {\n        this.handler.callbackHandlers[this.handler.requestID] = {\n            action: meshCallback,\n            serializer: this.serializer.reconstructFlatMesh\n        };\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshes, { modelID });\n    }\n\n    async StreamAllMeshesWithTypes(modelID: number, types: number[], meshCallback: (mesh: FlatMesh) => void): Promise<void> {\n        this.handler.callbackHandlers[this.handler.requestID] = {\n            action: meshCallback,\n            serializer: this.serializer.reconstructFlatMesh\n        };\n        return this.handler.request(this.API, WorkerActions.StreamAllMeshesWithTypes, { modelID, types });\n    }\n\n    async IsModelOpen(modelID: number): Promise<boolean> {\n        return this.handler.request(this.API, WorkerActions.IsModelOpen, { modelID });\n    }\n\n    async LoadAllGeometry(modelID: number): Promise<Vector<FlatMesh>> {\n        this.handler.serializeHandlers[this.handler.requestID] = (vector: SerializedVector) => {\n            return this.serializer.reconstructFlatMeshVector(vector);\n        }\n        return this.handler.request(this.API, WorkerActions.LoadAllGeometry, { modelID });\n    }\n\n    async GetFlatMesh(modelID: number, expressID: number): Promise<FlatMesh> {\n        this.handler.serializeHandlers[this.handler.requestID] = (flatMesh: SerializedFlatMesh) => {\n            return this.serializer.reconstructFlatMesh(flatMesh);\n        }\n        return this.handler.request(this.API, WorkerActions.GetFlatMesh, { modelID, expressID });\n    }\n\n    async SetWasmPath(path: string): Promise<void> {\n        return this.handler.request(this.API, WorkerActions.SetWasmPath, { path });\n    }\n}","import { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\nimport { IfcState } from '../../BaseDefinitions';\n\nexport class WorkerStateHandler {\n    API = WorkerAPIs.workerState;\n    state: IfcState;\n\n    constructor(private handler: IFCWorkerHandler) {\n        this.state = this.handler.state;\n    }\n\n    async updateStateUseJson() {\n        const useJson = this.state.useJSON;\n        return this.handler.request(this.API, WorkerActions.updateStateUseJson, { useJson });\n    }\n\n    async updateStateWebIfcSettings() {\n        const webIfcSettings = this.state.webIfcSettings;\n        return this.handler.request(this.API, WorkerActions.updateStateWebIfcSettings, { webIfcSettings });\n    }\n\n    async updateModelStateTypes (modelID: number, types: any) {\n        return this.handler.request(this.API, WorkerActions.updateModelStateTypes, { modelID, types });\n    }\n\n    async updateModelStateJsonData(modelID: number, jsonData: any) {\n        return this.handler.request(this.API, WorkerActions.updateModelStateJsonData, { modelID, jsonData });\n    }\n\n    async loadJsonDataFromWorker(modelID: number, path: string) {\n        return this.handler.request(this.API, WorkerActions.loadJsonDataFromWorker, { modelID, path });\n    }\n}","export enum DBOperation {\n    transferIfcModel,\n    transferIndividualItems\n}\n\nexport class IndexedDatabase {\n    async save(item: any, id: DBOperation) {\n        const open = IndexedDatabase.openOrCreateDB(id);\n        this.createSchema(open, id)\n        return new Promise<any>((resolve, reject) => {\n            open.onsuccess = () => this.saveItem(item, open, id, resolve);\n        });\n    }\n\n    async load(id: number) {\n        const open = IndexedDatabase.openOrCreateDB(id);\n        return new Promise<any>((resolve, reject) => {\n            open.onsuccess = () => this.loadItem(open, id, resolve);\n        })\n    }\n\n    private createSchema(open: IDBOpenDBRequest, id: DBOperation) {\n        open.onupgradeneeded = function () {\n            const db = open.result;\n            db.createObjectStore(id.toString(), {keyPath: \"id\"});\n        };\n    }\n\n    private saveItem(item: any, open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\n        item.id = id;\n        store.put(item);\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, resolve);\n    }\n\n    private loadItem(open: IDBOpenDBRequest, id: DBOperation, resolve: (value: any) => void ) {\n        const {db, tx, store} = IndexedDatabase.getDBItems(open, id);\n        const item = store.get(id);\n        const callback = () => {\n            delete item.result.id;\n            resolve(item.result)\n        };\n        tx.oncomplete = () => IndexedDatabase.closeDB(db, tx, callback);\n    }\n\n    private static getDBItems(open: IDBOpenDBRequest, id: DBOperation) {\n        const db = open.result;\n        const tx = db.transaction(id.toString(), \"readwrite\");\n        const store = tx.objectStore(id.toString());\n        return {db, tx, store};\n    }\n\n    private static openOrCreateDB(id: DBOperation) {\n        return indexedDB.open(id.toString(), 1);\n    }\n\n    private static closeDB(db: IDBDatabase, tx: IDBTransaction, resolve: (value: any) => void) {\n        db.close();\n        resolve(\"success\");\n    }\n}","import {OptionalCategories, ParserAPI, ParserProgress } from '../../components/IFCParser';\nimport { WorkerActions, WorkerAPIs } from '../BaseDefinitions';\nimport { IFCWorkerHandler } from '../IFCWorkerHandler';\nimport { IFCModel } from '../../components/IFCModel';\nimport { Serializer } from '../serializer/Serializer';\nimport { ParserResult } from '../workers/ParserWorker';\nimport { BvhManager } from '../../components/BvhManager';\nimport { DBOperation, IndexedDatabase } from '../../indexedDB/IndexedDatabase';\nimport { IFCOPENINGELEMENT, IFCSPACE } from \"web-ifc\";\n\nexport class ParserHandler implements ParserAPI {\n\n    optionalCategories: OptionalCategories = {\n        [IFCSPACE]: true,\n        [IFCOPENINGELEMENT]: false\n    };\n\n    API = WorkerAPIs.parser;\n\n    constructor(private handler: IFCWorkerHandler,\n                private serializer: Serializer,\n                private BVH: BvhManager,\n                private IDB: IndexedDatabase) {\n    }\n\n    async setupOptionalCategories(config: OptionalCategories) {\n        this.optionalCategories = config;\n        return this.handler.request(this.API, WorkerActions.setupOptionalCategories, {config});\n    }\n\n    async parse(buffer: any, coordinationMatrix?: number[]): Promise<IFCModel> {\n        this.handler.onprogressHandlers[this.handler.requestID] = (progress: ParserProgress) => {\n            if (this.handler.state.onProgress) this.handler.state.onProgress(progress);\n        };\n        this.handler.serializeHandlers[this.handler.requestID] = async (result: ParserResult) => {\n            this.updateState(result.modelID);\n            // await this.getItems(result.modelID);\n            return this.getModel();\n        };\n        return this.handler.request(this.API, WorkerActions.parse, {buffer, coordinationMatrix});\n    }\n\n    getAndClearErrors(_modelId: number): void {\n    }\n\n    private updateState(modelID: number) {\n        this.handler.state.models[modelID] = {\n            modelID: modelID,\n            mesh: {} as any,\n            types: {},\n            jsonData: {}\n        };\n    }\n\n    // private async getItems(modelID: number) {\n    //     const items = await this.IDB.load(DBOperation.transferIndividualItems);\n    //     this.handler.state.models[modelID].items = this.serializer.reconstructGeometriesByMaterials(items);\n    // }\n\n    private async getModel() {\n        const serializedModel = await this.IDB.load(DBOperation.transferIfcModel);\n        const model = this.serializer.reconstructIfcModel(serializedModel);\n        this.BVH.applyThreeMeshBVH(model.geometry);\n        this.handler.state.models[model.modelID].mesh = model;\n        return model;\n    }\n}","import { IfcEventData, WorkerActions, WorkerAPIs } from './BaseDefinitions';\nimport { Serializer } from './serializer/Serializer';\nimport { PropertyHandler } from './handlers/PropertyHandler';\nimport { WebIfcHandler } from './handlers/WebIfcHandler';\nimport { IfcState } from '../BaseDefinitions';\nimport { WorkerStateHandler } from './handlers/WorkerStateHandler';\nimport { ParserHandler } from './handlers/ParserHandler';\nimport { BvhManager } from '../components/BvhManager';\nimport { IndexedDatabase } from '../indexedDB/IndexedDatabase';\n\nexport class IFCWorkerHandler {\n\n    requestID = 0;\n    rejectHandlers: any = {};\n    resolveHandlers: any = {};\n    serializeHandlers: any = {};\n    callbackHandlers: { [id: number]: { action: any, serializer: any } } = {};\n    onprogressHandlers: any = {};\n\n    readonly IDB: IndexedDatabase;\n    readonly workerState: WorkerStateHandler;\n    readonly webIfc: WebIfcHandler;\n    readonly properties: PropertyHandler;\n    readonly parser: ParserHandler;\n\n    private ifcWorker: Worker;\n    private readonly serializer = new Serializer();\n    private readonly workerPath: string;\n\n    constructor(public state: IfcState, private BVH: BvhManager) {\n        this.IDB = new IndexedDatabase();\n        this.workerPath = this.state.worker.path;\n        this.ifcWorker = new Worker(this.workerPath);\n        this.ifcWorker.onmessage = (data: any) => this.handleResponse(data);\n        this.properties = new PropertyHandler(this);\n        this.parser = new ParserHandler(this, this.serializer, this.BVH, this.IDB);\n        this.webIfc = new WebIfcHandler(this, this.serializer);\n        this.workerState = new WorkerStateHandler(this);\n    }\n\n    request(worker: WorkerAPIs, action: WorkerActions, args?: any) {\n        const data: IfcEventData = {worker, action, args, id: this.requestID, result: undefined, onProgress: false};\n\n        return new Promise<any>((resolve, reject) => {\n            this.resolveHandlers[this.requestID] = resolve;\n            this.rejectHandlers[this.requestID] = reject;\n            this.requestID++;\n            this.ifcWorker.postMessage(data);\n        });\n    }\n\n    async terminate() {\n        await this.request(WorkerAPIs.workerState, WorkerActions.dispose);\n        await this.request(WorkerAPIs.webIfc, WorkerActions.DisposeWebIfc);\n        this.ifcWorker.terminate();\n    }\n\n    async Close(): Promise<void> {\n        await this.request(WorkerAPIs.webIfc, WorkerActions.Close);\n    }\n\n    private handleResponse(event: MessageEvent) {\n        const data = event.data as IfcEventData;\n        if (data.onProgress) {\n            this.resolveOnProgress(data);\n            return;\n        }\n        this.callHandlers(data);\n        delete this.resolveHandlers[data.id];\n        delete this.rejectHandlers[data.id];\n        delete this.onprogressHandlers[data.id];\n    }\n\n    private callHandlers(data: IfcEventData) {\n        try {\n            this.resolveSerializations(data);\n            this.resolveCallbacks(data);\n            this.resolveHandlers[data.id](data.result);\n        } catch (error) {\n            this.rejectHandlers[data.id](error);\n        }\n    }\n\n    private resolveOnProgress(data: IfcEventData) {\n        if (this.onprogressHandlers[data.id]) {\n            data.result = this.onprogressHandlers[data.id](data.result);\n        }\n    }\n\n    private resolveSerializations(data: IfcEventData) {\n        if (this.serializeHandlers[data.id]) {\n            data.result = this.serializeHandlers[data.id](data.result);\n            delete this.serializeHandlers[data.id];\n        }\n    }\n\n    private resolveCallbacks(data: IfcEventData) {\n        if (this.callbackHandlers[data.id]) {\n            let callbackParameter = data.result;\n            if (this.callbackHandlers[data.id].serializer) {\n                callbackParameter = this.callbackHandlers[data.id].serializer(data.result);\n            }\n            this.callbackHandlers[data.id].action(callbackParameter);\n        }\n    }\n}","import { IfcState } from '../BaseDefinitions';\nimport { Material } from 'three';\n\nexport class MemoryCleaner {\n    constructor(private state: IfcState) {\n    }\n\n    async dispose() {\n\n        Object.keys(this.state.models).forEach(modelID => {\n            const model = this.state.models[parseInt(modelID, 10)];\n            model.mesh.removeFromParent();\n            const geom = model.mesh.geometry as any;\n            if (geom.disposeBoundsTree) geom.disposeBoundsTree();\n            geom.dispose();\n            if (!Array.isArray(model.mesh.material)) model.mesh.material.dispose();\n            else model.mesh.material.forEach(mat => mat.dispose());\n            (model.mesh as any) = null;\n            (model.types as any) = null;\n            (model.jsonData as any) = null;\n        });\n\n        (this.state.api as any) = null;\n        (this.state.models as any) = null;\n    }\n}","import { IfcState } from '../BaseDefinitions';\n\nexport class IFCUtils {\n    \n    map: {[key: string]: number} = {};\n\n    constructor(public state: IfcState) {}\n\n    isA(entity: any, entity_class: string){\n        var test = false;\n        if (entity_class){\n            if (this.state.api.GetNameFromTypeCode(entity.type) === entity_class.toUpperCase()){\n                test = true;\n            }\n            return test\n        }\n        else {\n            return this.state.api.GetNameFromTypeCode(entity.type);\n        }\n    }\n\n    async byId (modelID: number, id: number) {\n        return this.state.api.GetLine(modelID, id);\n    }\n\n    async idsByType(modelID: number, entity_class: string){\n        let entities_ids = await this.state.api.GetLineIDsWithType(modelID, Number(this.state.api.GetTypeCodeFromName(entity_class.toUpperCase())));\n        return entities_ids\n    }\n\n    async byType(modelID:number, entity_class:string){\n        let entities_ids = await this.idsByType(modelID, entity_class) \n        if (entities_ids !== null){\n            let items: number[] = [];\n            for (let i = 0; i < entities_ids.size(); i++){\n                let entity = await this.byId(modelID, entities_ids.get(i))\n                items.push(entity);\n            } \n            return items;\n        }\n    }\n}\n","import { IfcState } from '../../BaseDefinitions';\nimport { IFCUtils } from '../IFCUtils'\n\nexport class Data {\n    isLoaded = false;\n    workPlans: {[key: number]: any} = {}\n    workSchedules: {[key: number]: any} = {}\n    workCalendars: {[key: number]: any} = {}\n    workTimes: {[key: number]: any} = {}\n    recurrencePatterns: {[key: number]: any} = {}\n    timePeriods: {[key: number]: any} = {}\n    tasks: {[key: number]: any} = {}\n    taskTimes: {[key: number]: any} = {}\n    lagTimes: {[key: number]: any} = {}\n    sequences: {[key: number]: any} = {}\n    utils: any;\n\n    constructor(public state: IfcState) {\n        this.utils = new IFCUtils(this.state);\n\n    }\n\n    //TO DO: Refactor to retrieve top-level task from a workschedule entity, and then load tasks.\n    // Currently only tasks are retrieved. \n    async load(modelID: number){\n        await this.loadTasks(modelID)\n        await this.loadWorkSchedules(modelID)\n        await this.loadWorkCalendars(modelID)\n        await this.loadWorkTimes(modelID)\n        await this.loadTimePeriods(modelID)\n        this.isLoaded = true\n\n    }\n\n\n    async loadWorkSchedules(modelID: number){\n        let workSchedules = await this.utils.byType(modelID, \"IfcWorkSchedule\")\n        for (let i = 0; i < workSchedules.length; i++){\n            let workSchedule = workSchedules[i]\n            this.workSchedules[workSchedule.expressID] = {   \n                \"Id\": workSchedule.expressID,\n                \"Name\": workSchedule.Name.value,\n                \"Description\": ((workSchedule.Description) ? workSchedule.Description.value : \"\"),\n                \"Creators\": [], \n                \"CreationDate\": ((workSchedule.CreationDate) ? workSchedule.CreationDate.value : \"\"),\n                \"StartTime\": ((workSchedule.StartTime) ? workSchedule.StartTime.value : \"\"),\n                \"FinishTime\": ((workSchedule.FinishTime) ? workSchedule.FinishTime.value : \"\"),\n                \"TotalFloat\": ((workSchedule.TotalFloat) ? workSchedule.TotalFloat.value : \"\"),\n                \"RelatedObjects\": [],\n            }\n        }\n        this.loadWorkScheduleRelatedObjects(modelID)\n    }\n\n\n    async loadWorkScheduleRelatedObjects(modelID: number){\n        let relsControls = await this.utils.byType(modelID, \"IfcRelAssignsToControl\");\n        for (let i = 0; i < relsControls.length; i++){\n            let relControls = relsControls[i];\n            let relatingControl = await this.utils.byId(modelID, relControls.RelatingControl.value);\n            let relatedObjects = relControls.RelatedObjects;\n            if (this.utils.isA(relatingControl, \"IfcWorkSchedule\")) {\n                for (var objectIndex = 0; objectIndex < relatedObjects.length; objectIndex++) {\n                    this.workSchedules[relatingControl.expressID][\"RelatedObjects\"].push(relatedObjects[objectIndex].value);\n                }\n            }\n        }\n    }\n\n    async loadTasks(modelID: number){\n        let tasks = await this.utils.byType(modelID, \"IfcTask\")\n        for (let i = 0; i < tasks.length; i++){\n            let task = tasks[i]\n            this.tasks[task.expressID] = {   \n                \"Id\": task.expressID,\n                \"Name\": ((task.Name) ? task.Name.value : \"\"),\n                \"PredefinedType\": ((task.PredefinedType) ? task.PredefinedType.value : \"\"),\n                \"TaskTime\": ((task.TaskTime) ? await this.utils.byId(modelID, task.TaskTime.value) : \"\"), \n                \"Identification\": ((task.Identification) ? task.Identification.value : \"\"),\n                \"IsMilestone\": ((task.IsMilestone) ? task.IsMilestone.value : \"\"),\n                \"IsPredecessorTo\": [],\n                \"IsSucessorFrom\": [],\n                \"Inputs\": [],\n                \"Resources\": [],\n                \"Outputs\": [],\n                \"Controls\": [],\n                \"Nests\": [],\n                \"IsNestedBy\": [],\n                \"OperatesOn\":[],\n                \"HasAssignmentsWorkCalendars\": [],\n            }\n        }\n        await this.loadTaskSequence(modelID)\n        await this.loadTaskOutputs(modelID)\n        await this.loadTaskNesting(modelID)\n        await this.loadTaskOperations(modelID)\n        await this.loadAssignementsWorkCalendar(modelID)\n    }\n\n    async loadTaskSequence(modelID: number){\n        let relsSequence = await this.utils.idsByType(modelID, \"IfcRelSequence\")\n        for (let i = 0; i < relsSequence.size(); i++){\n            let relSequenceId = relsSequence.get(i)\n            if(relSequenceId !==0){\n                let relSequence = await this.utils.byId(modelID, relSequenceId)\n                let related_process = relSequence.RelatedProcess.value;\n                let relatingProcess = relSequence.RelatingProcess.value;\n                this.tasks[relatingProcess][\"IsPredecessorTo\"].push(relSequence.expressID)\n                this.tasks[related_process][\"IsSucessorFrom\"].push(relSequence.expressID)\n            }\n        }\n            \n    }\n\n    async loadTaskOutputs(modelID: number){\n        let rels_assigns_to_product = await this.utils.byType(modelID, \"IfcRelAssignsToProduct\");\n        for (let i = 0; i < rels_assigns_to_product.length; i++){\n            let relAssignsToProduct = rels_assigns_to_product[i]\n            let relatedObject = await this.utils.byId(modelID, relAssignsToProduct.RelatedObjects[0].value); \n            if (this.utils.isA(relatedObject, \"IfcTask\")) {\n                let relatingProduct = await this.utils.byId(modelID, relAssignsToProduct.RelatingProduct.value);\n                this.tasks[relatedObject.expressID][\"Outputs\"].push(relatingProduct.expressID);\n            }\n        }\n    }\n\n    async loadTaskNesting(modelID: number){\n        let rels_nests = await this.utils.byType(modelID, \"IfcRelNests\");\n        for (let i = 0; i < rels_nests.length; i++){\n            let relNests = rels_nests[i];\n            let relating_object = await this.utils.byId(modelID, relNests.RelatingObject.value);\n            if (this.utils.isA(relating_object, \"IfcTask\")) {\n                let relatedObjects = relNests.RelatedObjects;\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\n                    this.tasks[relating_object.expressID][\"IsNestedBy\"].push(relatedObjects[object_index].value);\n                    this.tasks[relatedObjects[object_index].value][\"Nests\"].push(relating_object.expressID);\n                }\n            }\n        }\n    }\n\n    async loadTaskOperations(modelID: number){\n        let relsAssignsToProcess = await this.utils.byType(modelID, \"IfcRelAssignsToProcess\");\n        for (let i = 0; i < relsAssignsToProcess.length; i++){\n            let relAssignToProcess = relsAssignsToProcess[i];\n            let relatingProcess = await this.utils.byId(modelID, relAssignToProcess.RelatingProcess.value);\n            if (this.utils.isA(relatingProcess, \"IfcTask\")) {\n                let relatedObjects = relAssignToProcess.RelatedObjects;\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\n                    this.tasks[relatingProcess.expressID][\"OperatesOn\"].push(relatedObjects[object_index].value);\n                }\n            }\n        }\n    }\n\n    async loadAssignementsWorkCalendar(modelID: number){\n        let relsAssignsToControl = await this.utils.byType(modelID, \"IfcRelAssignsToControl\");\n        for (let i = 0; i < relsAssignsToControl.length; i++){\n            let relAssignsToControl = relsAssignsToControl[i];\n            let relatingControl = await this.utils.byId(modelID, relAssignsToControl.RelatingControl.value);\n            if (this.utils.isA(relatingControl, \"IfcWorkCalendar\")) {\n                let relatedObjects = relAssignsToControl.RelatedObjects;\n                for (var object_index = 0; object_index < relatedObjects.length; object_index++) {\n                    this.tasks[relatedObjects[object_index].value][\"HasAssignmentsWorkCalendars\"].push(relatingControl.expressID);\n                }\n            }\n        }\n    }\n\n    async loadWorkCalendars(modelID: number){\n        let workCalendars = await this.utils.byType(modelID, \"IfcWorkCalendar\")\n        for (let i = 0; i < workCalendars.length; i++){\n            let workCalendar = workCalendars[i]\n            let workCalenderData = {   \n                \"Id\": workCalendar.expressID,\n                \"Name\": ((workCalendar.Name) ? workCalendar.Name.value : \"\"),\n                \"Description\": ((workCalendar.Description) ? workCalendar.Description.value : \"\"),\n                \"WorkingTimes\": ((workCalendar.WorkingTimes) ? workCalendar.WorkingTimes : []),\n                \"ExceptionTimes\": ((workCalendar.ExceptionTimes) ? workCalendar.ExceptionTimes : []),\n            }\n            this.workCalendars[workCalendar.expressID] = workCalenderData\n        }\n        // this.loadworkCalendarRelatedObjects(modelID)\n    }    \n\n    async loadWorkTimes(modelID: number){\n        let workTimes = await this.utils.byType(modelID, \"IfcWorkTime\")\n        for (let i = 0; i < workTimes.length; i++){\n            let workTime = workTimes[i]\n            let workTimeData = {   \n                \"Name\": ((workTime.Name) ? workTime.Name.value : \"\"),\n                \"RecurrencePattern\": ((workTime.RecurrencePattern) ? await this.utils.byId(modelID, workTime.RecurrencePattern.value) : \"\"), \n                \"Start\": ((workTime.Start) ? new Date(workTime.Start.value) : \"\"),\n                \"Finish\": ((workTime.Finish) ? new Date(workTime.Finish.value) : \"\"),\n            }\n            this.workTimes[workTime.expressID] = workTimeData\n        }\n    }\n\n    async loadTimePeriods(modelID: number){\n        let timePeriods = await this.utils.byType(modelID, \"IfcTimePeriod\")\n        for (let i = 0; i < timePeriods.length; i++){\n            let timePeriod = timePeriods[i]\n            let workTimeData = {   \n                \"StartTime\": ((timePeriod.StartTime) ? new Date(timePeriod.StartTime.value) : \"\"),\n                \"EndTime\": ((timePeriod.EndTime) ? new Date(timePeriod.EndTime.value) : \"\"),\n            }\n            this.timePeriods[timePeriod.expressID] = workTimeData\n        }\n    }    \n}\n","import * as WebIFC from 'web-ifc';\nimport { IFCParser, ParserAPI, ParserProgress } from './IFCParser';\nimport { SubsetManager } from './subsets/SubsetManager';\nimport { PropertyManager } from './properties/PropertyManager';\nimport { TypeManager } from './TypeManager';\nimport { SubsetConfig, IfcState, JSONObject } from '../BaseDefinitions';\nimport {BufferGeometry, Material, Matrix4, Scene} from 'three';\nimport { IFCModel } from './IFCModel';\nimport { BvhManager } from './BvhManager';\nimport { LoaderSettings } from 'web-ifc';\nimport { IFCWorkerHandler } from '../web-workers/IFCWorkerHandler';\nimport { PropertyManagerAPI } from './properties/BaseDefinitions';\nimport { MemoryCleaner } from './MemoryCleaner';\nimport { IFCUtils } from './IFCUtils';\nimport { Data } from './sequence/Data'\n\n/**\n * Contains all the logic to work with the loaded IFC files (select, edit, etc).\n */\nexport class IFCManager {\n    state: IfcState = {\n        models: [],\n        api: new WebIFC.IfcAPI(),\n        useJSON: false,\n        worker: { active: false, path: '' }\n    };\n\n    BVH = new BvhManager();\n    parser: ParserAPI = new IFCParser(this.state, this.BVH);\n    subsets = new SubsetManager(this.state, this.BVH);\n    utils = new IFCUtils(this.state);\n    sequenceData = new Data(this.state);\n    properties: PropertyManagerAPI = new PropertyManager(this.state);\n    types = new TypeManager(this.state);\n\n    useFragments = false;\n\n    private cleaner = new MemoryCleaner(this.state);\n    private worker?: IFCWorkerHandler;\n\n    /**\n     * Returns the underlying web-ifc API.\n     */\n    get ifcAPI() {\n        return this.state.api;\n    }\n\n    // SETUP - all the logic regarding the configuration of web-ifc-three\n\n    async parse(buffer: ArrayBuffer) {\n        let model = await this.parser.parse(buffer, this.state.coordinationMatrix?.toArray()) as IFCModel;\n        model.setIFCManager(this);\n        // this.state.useJSON ? await this.disposeMemory() : await this.types.getAllTypes(this.worker);\n        // TODO: refactor this\n        try {\n            await this.types.getAllTypes(this.worker);\n        } catch (e) {\n            console.log(\"Could not get all types of model.\");\n        }\n        return model;\n    }\n\n    /**\n     * Sets the relative path of web-ifc.wasm file in the project.\n     * Beware: you **must** serve this file in your page; this means\n     * that you have to copy this files from *node_modules/web-ifc*\n     * to your deployment directory.\n     *\n     * If you don't use this methods,\n     * IFC.js assumes that you are serving it in the root directory.\n     *\n     * Example if web-ifc.wasm is in dist/wasmDir:\n     * `ifcLoader.setWasmPath(\"dist/wasmDir/\");`\n     *\n     * @path Relative path to web-ifc.wasm.\n     */\n    async setWasmPath(path: string) {\n        this.state.api.SetWasmPath(path);\n        this.state.wasmPath = path;\n    }\n\n    /**\n     * Makes object picking a lot faster\n     * Courtesy of gkjohnson's [work](https://github.com/gkjohnson/three-mesh-bvh).\n     * Import these objects from his library and pass them as arguments. IFC.js takes care of the rest!\n     */\n    setupThreeMeshBVH(computeBoundsTree: any, disposeBoundsTree: any, acceleratedRaycast: any) {\n        this.BVH.initializeMeshBVH(computeBoundsTree, disposeBoundsTree, acceleratedRaycast);\n    }\n\n    /**\n     * Sets a callback function that is called every 10% of IFC loaded.\n     * @onProgress callback function\n     */\n    setOnProgress(onProgress: (event: ParserProgress) => void) {\n        this.state.onProgress = onProgress;\n    }\n\n\n    /**\n     * Sets a coordination matrix to be applied when loading geometry.\n     * @matrix THREE.Matrix4\n     */\n    setupCoordinationMatrix(matrix: Matrix4){\n        this.state.coordinationMatrix = matrix;\n    }\n\n    /**\n     * Clears the coordination matrix that is applied when loading geometry.\n     */\n    clearCoordinationMatrix(){\n        delete this.state.coordinationMatrix;\n    }\n\n    /**\n     * Applies a configuration for [web-ifc](https://ifcjs.github.io/info/docs/Guide/web-ifc/Introduction).\n     */\n    async applyWebIfcConfig(settings: LoaderSettings) {\n        this.state.webIfcSettings = settings;\n        if (this.state.worker.active && this.worker) {\n            await this.worker.workerState.updateStateWebIfcSettings();\n        }\n    }\n\n    /**\n     * Uses web workers, making the loader non-blocking.\n     * @active Wether to use web workers or not.\n     * @path Relative path to the web worker file. Necessary if active=true.\n     */\n    async useWebWorkers(active: boolean, path?: string) {\n        if (this.state.worker.active === active) return;\n        // @ts-ignore\n        this.state.api = null;\n        if (active) {\n            if (!path) throw new Error('You must provide a path to the web worker.');\n            this.state.worker.active = active;\n            this.state.worker.path = path;\n            await this.initializeWorkers();\n            const wasm = this.state.wasmPath;\n            if(wasm) await this.setWasmPath(wasm);\n        } else {\n            this.state.api = new WebIFC.IfcAPI();\n        }\n    }\n\n    /**\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\n     * Enables the JSON mode (which consumes way less memory) and eliminates the WASM data.\n     * Only use this in the following scenarios:\n     * - If you don't need to access the properties of the IFC\n     * - If you will provide the properties as JSON.\n     * @useJSON: Wether to use the JSON mode or not.\n     */\n    async useJSONData(useJSON = true) {\n        this.state.useJSON = useJSON;\n        if (useJSON) {\n            await this.worker?.workerState.updateStateUseJson();\n        }\n    }\n\n    /**\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\n     * Adds the properties of a model as JSON data. If you are using web workers, use\n     * `loadJsonDataFromWorker()` instead to avoid overheads.\n     * @modelID ID of the IFC model.\n     * @data: data as an object where the keys are the expressIDs and the values the properties.\n     */\n    async addModelJSONData(modelID: number, data: { [id: number]: JSONObject }) {\n        const model = this.state.models[modelID];\n        if (!model) throw new Error('The specified model for the JSON data does not exist');\n        if (this.state.worker.active) {\n            await this.worker?.workerState.updateModelStateJsonData(modelID, data);\n        } else {\n            model.jsonData = data;\n        }\n    }\n\n    /**\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\n     * Loads the data of an IFC model from a JSON file directly from a web worker. If you are not using\n     * web workers, use `addModelJSONData()` instead.\n     * @modelID ID of the IFC model.\n     * @path: the path to the JSON file **relative to the web worker file**.\n     */\n    async loadJsonDataFromWorker(modelID: number, path: string) {\n        if (this.state.worker.active) {\n            await this.worker?.workerState.loadJsonDataFromWorker(modelID, path);\n        }\n    }\n\n    /**\n     * Closes the specified model and deletes it from the [scene](https://threejs.org/docs/#api/en/scenes/Scene).\n     * @modelID ID of the IFC model.\n     * @scene Scene where the model is (if it's located in a scene).\n     */\n    close(modelID: number, scene?: Scene) {\n        try {\n            this.state.api.CloseModel(modelID);\n            const mesh = this.state.models[modelID].mesh;\n            const { geometry, material } = mesh;\n            if (scene) scene.remove(mesh);\n            geometry?.dispose();\n            Array.isArray(material) ? material.forEach(m => m.dispose()) : material?.dispose();\n            delete this.state.models[modelID];\n        } catch(e) {\n            console.warn(`Close IFCModel ${modelID} failed`);\n        }\n    }\n\n    /**\n     * Gets the **Express ID** to which the given face belongs.\n     * This ID uniquely identifies this entity within this IFC file.\n     * @geometry The geometry IFC model.\n     * @faceIndex The index of the face of a geometry.You can easily get this index using the [Raycaster](https://threejs.org/docs/#api/en/core/Raycaster).\n     */\n    getExpressId(geometry: BufferGeometry, faceIndex: number) {\n        return this.properties.getExpressId(geometry, faceIndex);\n    }\n\n    /**\n     * Returns all items of the specified type. You can import\n     * the types from *web-ifc*.\n     *\n     * Example to get all the standard walls of a project:\n     * ```js\n     * import { IFCWALLSTANDARDCASE } from 'web-ifc';\n     * const walls = ifcLoader.getAllItemsOfType(IFCWALLSTANDARDCASE);\n     * ```\n     * @modelID ID of the IFC model.\n     * @type type of IFC items to get.\n     * @verbose If false (default), this only gets IDs. If true, this also gets the native properties of all the fetched items.\n     */\n    getAllItemsOfType(modelID: number, type: number, verbose: boolean) {\n        return this.properties.getAllItemsOfType(modelID, type, verbose);\n    }\n\n    /**\n     * Gets the native properties of the given element.\n     * @modelID ID of the IFC model.\n     * @id Express ID of the element.\n     * @recursive Wether you want to get the information of the referenced elements recursively.\n     */\n    getItemProperties(modelID: number, id: number, recursive = false) {\n        return this.properties.getItemProperties(modelID, id, recursive);\n    }\n\n    /**\n     * Gets the [property sets](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifckernel/lexical/ifcpropertyset.htm)\n     * assigned to the given element.\n     * @modelID ID of the IFC model.\n     * @id Express ID of the element.\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\n     */\n    getPropertySets(modelID: number, id: number, recursive = false) {\n        return this.properties.getPropertySets(modelID, id, recursive);\n    }\n\n    /**\n     * Gets the properties of the type assigned to the element.\n     * For example, if applied to a wall (IfcWall), this would get back the information\n     * contained in the IfcWallType assigned to it, if any.\n     * @modelID ID of the IFC model.\n     * @id Express ID of the element.\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\n     */\n    getTypeProperties(modelID: number, id: number, recursive = false) {\n        return this.properties.getTypeProperties(modelID, id, recursive);\n    }\n\n    /**\n     * Gets the materials assigned to the given element.\n     * @modelID ID of the IFC model.\n     * @id Express ID of the element.\n     * @recursive If true, this gets the native properties of the referenced elements recursively.\n     */\n    getMaterialsProperties(modelID: number, id: number, recursive = false) {\n        return this.properties.getMaterialsProperties(modelID, id, recursive);\n    }\n\n    /**\n     * Gets the ifc type of the specified item.\n     * @modelID ID of the IFC model.\n     * @id Express ID of the element.\n     */\n    getIfcType(modelID: number, id: number) {\n        const typeID = this.state.models[modelID].types[id];\n        return this.state.api.GetNameFromTypeCode(typeID);\n    }\n\n    /**\n     * Gets the spatial structure of the project. The\n     * [spatial structure](https://standards.buildingsmart.org/IFC/DEV/IFC4_2/FINAL/HTML/schema/ifcproductextension/lexical/ifcspatialstructureelement.htm)\n     * is the hierarchical structure that organizes every IFC project (all physical items\n     * are referenced to an element of the spatial structure). It is formed by\n     * one IfcProject that contains one or more IfcSites, that contain one or more\n     * IfcBuildings, that contain one or more IfcBuildingStoreys, that contain\n     * one or more IfcSpaces.\n     * @modelID ID of the IFC model.\n     */\n    getSpatialStructure(modelID: number, includeProperties?: boolean) {\n        return this.properties.getSpatialStructure(modelID, includeProperties);\n    }\n\n    /**\n     * Gets the mesh of the subset with the specified [material](https://threejs.org/docs/#api/en/materials/Material).\n     * If no material is given, this returns the subset with the original materials.\n     * @modelID ID of the IFC model.\n     * @material Material assigned to the subset (if any).\n     * @customId Optional identifier of the subset.\n     */\n    getSubset(modelID: number, material?: Material, customId?: string) {\n        return this.subsets.getSubset(modelID, material, customId);\n    }\n\n    /**\n     * Removes the specified subset.\n     * @modelID ID of the IFC model.\n     * @parent The parent where the subset is (can be any `THREE.Object3D`).\n     * @material Material assigned to the subset, if any.\n     */\n    removeSubset(modelID: number, material?: Material, customID?: string) {\n        this.subsets.removeSubset(modelID, material, customID);\n    }\n\n    /**\n     * Creates a new geometric subset.\n     * @config A configuration object with the following options:\n     * - **scene**: `THREE.Object3D` where the model is located.\n     * - **modelID**: ID of the model.\n     * - **ids**: Express IDs of the items of the model that will conform the subset.\n     * - **removePrevious**: wether to remove the previous subset of this model with this material.\n     * - **material**: (optional) wether to apply a material to the subset.\n     * - **customID**: (optional) custom identifier to distinguish subsets of the same model with the same material.\n     */\n    createSubset(config: SubsetConfig) {\n        return this.subsets.createSubset(config);\n    }\n\n    /**\n     * Removes the specified items from the geometry of a subset.\n     * @modelID ID of the IFC model.\n     * @ids Express IDs of the items of the model that will conform the subset.\n     * @material (optional) Material assigned to the subset, if any.\n     * @customID (optional) custom identifier to distinguish subsets of the same model with the same material.\n     */\n    removeFromSubset(modelID: number, ids: number[], customID?: string, material?: Material) {\n        return this.subsets.removeFromSubset(modelID, ids, customID, material);\n    }\n\n    /**\n     * Removes all the geometry of a subset.\n     * @modelID ID of the IFC model.\n     * @ids Express IDs of the items of the model that will conform the subset.\n     * @material (optional) Material assigned to the subset, if any.\n     * @customID (optional) custom identifier to distinguish subsets of the same model with the same material.\n     */\n    clearSubset(modelID: number, customID?: string, material?: Material) {\n        return this.subsets.clearSubset(modelID, customID, material);\n    }\n\n\n\n\n    // UTILITIES - Miscelaneus logic for various purposes\n\n    /**\n    * Returns the IFC class name of an instance if the optional parameter is not provided.\n    * If an entit class is provided, it will check if an instance belongs to the class.\n    * @modelID ID of the IFC model.\n    * @entityClass IFC Class name.\n    */\n    async isA(entity: any, entity_class: string) {\n        return this.utils.isA(entity, entity_class);\n    }\n\n    async getSequenceData(modelID: number) {\n        await this.sequenceData.load(modelID);\n        return this.sequenceData;\n    }\n\n\n    /**\n    * Returns the IFC objects filtered by IFC Type and wrapped with the entity_instance class.\n    * If an IFC type class has subclasses, all entities of those subclasses are also returned.\n    * @modelID ID of the IFC model.\n    * @entityClass IFC Class name.\n    */\n    async byType(modelID: number, entityClass: string) {\n        return this.utils.byType(modelID, entityClass);\n    }\n\n    /**\n    * Returns the IFC objects filtered by IFC ID.\n    * @modelID ID of the IFC model.\n    * @id Express ID of the element.\n    */\n    async byId(modelID: number, id: number) {\n        return this.utils.byId(modelID, id);\n    }\n\n    /**\n    * Returns the IFC objects filtered by IFC Type and wrapped with the entity_instance class.\n    * If an IFC type class has subclasses, all entities of those subclasses are also returned.\n    * @modelID ID of the IFC model.\n    * @entityClass IFC Class name.\n    */\n    async idsByType(modelID: number, entityClass: string) {\n        return this.utils.idsByType(modelID, entityClass);\n    }\n\n\n    // MISC - Miscelaneus logic for various purposes\n\n    /**\n     * Disposes all memory used by the IFCLoader, including WASM memory and the web worker.\n     * Use this if you want to destroy the object completely.\n     * If you want to load an IFC later, you'll need to create a new instance.\n     */\n    async dispose() {\n        IFCModel.dispose();\n        await this.cleaner.dispose();\n        this.subsets.dispose();\n        if(this.worker && this.state.worker.active) await this.worker.terminate();\n        (this.state as any) = null;\n    }\n\n    /**\n     * @deprecated This approach had sense when the compute-heavy operations were blocking. If you are facing performance issues, you can either use webworkers or use the approach used in web-ifc-viewer to work with JSON and glTF. If you have any question regarding this, check out the docs or ask us direclty.\n     * Completely releases the WASM memory, thus drastically decreasing the memory use of the app.\n     * Only use this in the following scenarios:\n     * - If you don't need to access the properties of the IFC\n     * - If you will provide the properties as JSON.\n     */\n    async disposeMemory() {\n        if (this.state.worker.active) {\n            await this.worker?.Close();\n        } else {\n            // @ts-ignore\n            this.state.api.Close();\n            (this.state.api as any) = null;\n            this.state.api = new WebIFC.IfcAPI();\n        }\n    }\n\n    /**\n     * For internal use of IFC.js dev team and testers\n     */\n    getAndClearErrors(modelID: number) {\n        return this.parser.getAndClearErrors(modelID);\n    }\n\n    private async initializeWorkers() {\n        this.worker = new IFCWorkerHandler(this.state, this.BVH);\n        this.state.api = this.worker.webIfc;\n        this.properties = this.worker.properties;\n        await this.worker.parser.setupOptionalCategories(this.parser.optionalCategories);\n        this.parser = this.worker.parser;\n        await this.worker.workerState.updateStateUseJson();\n        await this.worker.workerState.updateStateWebIfcSettings();\n    }\n\n\n}\n","import { IFCManager } from './IFC/components/IFCManager';\nimport {FileLoader, Loader, LoadingManager, Matrix4} from 'three';\nimport { IFCModel } from './IFC/components/IFCModel';\n\nclass IFCLoader extends Loader {\n    ifcManager: IFCManager;\n    private onProgress?: (event: ProgressEvent) => void;\n\n    constructor(manager?: LoadingManager) {\n        super(manager);\n        this.ifcManager = new IFCManager();\n    }\n\n    load(\n        url: any,\n        onLoad: (ifc: IFCModel) => void,\n        onProgress?: (event: ProgressEvent) => void,\n        onError?: (event: ErrorEvent) => void\n    ) {\n        const scope = this;\n\n        const loader = new FileLoader(scope.manager);\n        this.onProgress = onProgress;\n        loader.setPath(scope.path);\n        loader.setResponseType('arraybuffer');\n        loader.setRequestHeader(scope.requestHeader);\n        loader.setWithCredentials(scope.withCredentials);\n        loader.load(\n            url,\n            async function (buffer) {\n                try {\n                    if (typeof buffer == 'string') {\n                        throw new Error('IFC files must be given as a buffer!');\n                    }\n                    onLoad(await scope.parse(buffer));\n                } catch (e: any) {\n                    if (onError) {\n                        onError(e);\n                    } else {\n                        console.error(e);\n                    }\n\n                    scope.manager.itemError(url);\n                }\n            },\n            onProgress,\n            onError\n        );\n    }\n\n    parse(buffer: ArrayBuffer) {\n        return this.ifcManager.parse(buffer);\n    }\n}\n\nexport { IFCLoader };\n"],"names":[],"mappings":";;;;;AAIA,MAAM,0BAA0B,GAAG,qBAAqB,CAAC;AAQnD,MAAO,QAAS,SAAQ,IAAI,CAAA;AAAlC,IAAA,WAAA,GAAA;;AAQI,QAAA,IAAA,CAAA,OAAO,GAAG,QAAQ,CAAC,cAAc,EAAE,CAAC;QACpC,IAAU,CAAA,UAAA,GAAsB,IAAI,CAAC;QAKrC,IAAI,CAAA,IAAA,GAAG,IAAI,CAAC;KA+Kf;AAzLG,IAAA,OAAO,OAAO,GAAA;AACV,QAAA,QAAQ,CAAC,cAAc,GAAG,CAAC,CAAC;KAC/B;AAUD,IAAA,aAAa,CAAC,OAAmB,EAAA;AAC7B,QAAA,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC;KAC7B;AAkBD,IAAA,WAAW,CAAC,IAAY,EAAA;AACpB,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;KACrC;AAQD,IAAA,KAAK,CAAC,KAAa,EAAA;AACf,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC1E,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;KAC9C;IAUD,YAAY,CAAC,QAAwB,EAAE,SAAiB,EAAA;AACpD,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KAC5D;IAgBD,iBAAiB,CAAC,IAAY,EAAE,OAAgB,EAAA;AAC5C,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACzE;AASD,IAAA,iBAAiB,CAAC,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAC3C,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACzE;AAUD,IAAA,eAAe,CAAC,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AACzC,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACvE;AAWD,IAAA,iBAAiB,CAAC,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAC3C,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACzE;AAQD,IAAA,UAAU,CAAC,EAAU,EAAA;AACjB,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACvD;IAaD,mBAAmB,GAAA;AACf,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;QAC1E,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;KAC5D;AASD,IAAA,SAAS,CAAC,QAAmB,EAAA;AACzB,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;KAC5D;IASD,YAAY,CAAC,QAAmB,EAAE,QAAiB,EAAA;AAC/C,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAClE;AAYD,IAAA,YAAY,CAAC,MAAwB,EAAA;AACjC,QAAA,IAAI,IAAI,CAAC,UAAU,KAAK,IAAI;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAC1E,QAAA,MAAM,WAAW,GAAG,EAAE,GAAG,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC;QACzD,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC;KACpD;;AA1Lc,QAAc,CAAA,cAAA,GAAG,CAAC;;MCuCxB,SAAS,CAAA;IAwBlB,WAAoB,CAAA,KAAe,EAAU,GAAgB,EAAA;QAAzC,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAAU,IAAG,CAAA,GAAA,GAAH,GAAG,CAAa;QAvB7D,IAAY,CAAA,YAAA,GAAG,CAAC,CAAC;AAEjB,QAAA,IAAA,CAAA,kBAAkB,GAAuB;YACrC,CAAC,QAAQ,GAAG,IAAI;YAChB,CAAC,iBAAiB,GAAG,KAAK;SAC7B,CAAC;QAEM,IAAqB,CAAA,qBAAA,GAAyB,EAAE,CAAC;AAEjD,QAAA,IAAA,CAAA,YAAY,GAAG;AACnB,YAAA,KAAK,EAAE,CAAC;AACR,YAAA,OAAO,EAAE,CAAC;AACV,YAAA,IAAI,EAAE,GAAG;SACZ,CAAA;QAGO,IAAe,CAAA,eAAA,GAAG,CAAC,CAAC,CAAC;QAGrB,IAAc,CAAA,cAAA,GAAG,CAAC,CAAC,CAAC;KAK3B;IAED,MAAM,uBAAuB,CAAC,MAA0B,EAAA;AACpD,QAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC;KACpC;AAED,IAAA,MAAM,KAAK,CAAC,MAAW,EAAE,kBAA6B,EAAA;QAClD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,KAAK,SAAS;YAAE,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC;AACzE,QAAA,MAAM,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,YAAY,EAAE,CAAC;AACpB,QAAA,IAAI,kBAAkB,EAAE;AACpB,YAAA,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,yBAAyB,CAAC,IAAI,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;AAC5F,SAAA;QACD,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACrD;AAED,IAAA,iBAAiB,CAAC,QAAgB,EAAA;KAEjC;IAEO,cAAc,CAAC,MAAc,EAAE,KAAa,EAAA;AAChD,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU;YAAE,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;KACvE;IAEO,MAAM,WAAW,CAAC,MAAW,EAAA;AACjC,QAAA,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,MAAM,CAAC,CAAC;QACpC,IAAI,CAAC,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;QACvF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC;QACpF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG;YACrC,OAAO,EAAE,IAAI,CAAC,cAAc;AAC5B,YAAA,IAAI,EAAE,EAAa;AACnB,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACf,CAAC;KACL;IAEO,MAAM,eAAe,CAAC,OAAe,EAAA;AACzC,QAAA,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;AACpC,QAAA,MAAM,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;AAE3C,QAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC,IAAc,KAAI;YACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAE1B,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACnC,SAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,MAAM,UAAU,GAAqB,EAAE,CAAC;QACxC,MAAM,SAAS,GAA0B,EAAE,CAAC;AAE5C,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;YACpD,MAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC;AACxE,YAAA,MAAM,MAAM,GAAG,qBAAqB,CAAC,oBAAoB,CAAC,CAAC;AAC3D,YAAA,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC;AACzD,YAAA,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC5B,SAAC,CAAC,CAAC;QAEH,MAAM,gBAAgB,GAAG,qBAAqB,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;AACjE,QAAA,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,IAAI,CAAC,GAAG;AAAE,YAAA,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,CAAC,CAAC;QAC3D,MAAM,KAAK,GAAG,IAAI,QAAQ,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;AACxD,QAAA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;AACpD,QAAA,OAAO,KAAK,CAAC;KAChB;IAEO,MAAM,sBAAsB,CAAC,OAAe,EAAA;AAChD,QAAA,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,yBAAyB,CAAC,CAAC;QAC3F,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AACxC,QAAA,IAAI,CAAC,YAAY,CAAC,OAAO,GAAG,CAAC,CAAC;AAC9B,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,GAAG,CAAC;KAChC;IAEO,kBAAkB,GAAA;AACtB,QAAA,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACzE;IAEO,kBAAkB,GAAA;AACtB,QAAA,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AACvF,QAAA,IAAG,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE;AACpE,YAAA,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;YACpF,IAAI,CAAC,cAAc,CAAC,eAAe,EAAE,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;AAC9D,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,IAAI,GAAG,CAAC;AACjC,SAAA;KACJ;AAGO,IAAA,qBAAqB,CAAC,OAAe,EAAA;QAEzC,MAAM,aAAa,GAAa,EAAE,CAAC;AAEnC,QAAA,KAAK,IAAI,GAAG,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACrC,IAAI,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;AAC7C,gBAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC/B,gBAAA,IAAI,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC;AAAE,oBAAA,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACvE,aAAA;AACJ,SAAA;AAED,QAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,wBAAwB,CAAC,IAAI,CAAC,eAAe,EAAE,aAAa,EAAE,CAAC,IAAc,KAAI;AAC5F,YAAA,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACnC,SAAC,CAAC,CAAC;KACN;IAEO,UAAU,CAAC,OAAe,EAAE,IAAc,EAAA;AAC9C,QAAA,MAAM,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC;AACzC,QAAA,MAAM,IAAI,GAAG,gBAAgB,CAAC,IAAI,EAAE,CAAC;QAErC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,cAAc,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC/C,YAAA,IAAI,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;AAC/E,YAAA,IAAI,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,YAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC3D,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AAC5D,SAAA;KACJ;AAEO,IAAA,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,cAA8B,EAAA;AACxF,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,EAAE,cAAc,CAAC,CAAC;AAC5E,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,kBAAkB,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;AAC9B,QAAA,OAAO,IAAI,CAAC;KACf;AAEO,IAAA,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,cAA8B,EAAA;AACxF,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,EAAE,cAAc,CAAC,iBAAiB,CAAgB,CAAC;QACtG,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,aAAa,EAAE,EAAE,QAAQ,CAAC,iBAAiB,EAAE,CAAiB,CAAC;QACpH,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,YAAY,EAAE,EAAE,QAAQ,CAAC,gBAAgB,EAAE,CAAgB,CAAC;AAClH,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAEnE,QAAQ,CAAC,MAAM,EAAE,CAAC;AAClB,QAAA,OAAO,MAAM,CAAC;KACjB;IAEO,uBAAuB,CAAC,KAAe,EAAE,QAAwB,EAAA;AACrE,QAAA,IAAI,KAAK,GAAG,CAAA,EAAG,KAAK,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAG,EAAA,KAAK,CAAC,CAAC,CAAA,EAAG,KAAK,CAAC,CAAC,EAAE,CAAC;AACvD,QAAA,IAAI,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,EAAE;AACnC,YAAA,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC5D,OAAO;AACV,SAAA;QAID,MAAM,GAAG,GAAG,IAAI,KAAK,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;AAClE,QAAA,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;QAC3E,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;QACrC,IAAI,QAAQ,CAAC,WAAW;AAAE,YAAA,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC;AACrD,QAAA,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;KAC5E;AAEO,IAAA,aAAa,CAAC,MAAqB,EAAA;AACvC,QAAA,MAAM,GAAG,GAAG,IAAI,OAAO,EAAE,CAAC;AAC1B,QAAA,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;AACtB,QAAA,OAAO,GAAG,CAAC;KACd;AAEO,IAAA,mBAAmB,CAAC,SAAiB,EAAE,UAAwB,EAAE,SAAsB,EAAA;AAC3F,QAAA,MAAM,QAAQ,GAAG,IAAI,cAAc,EAAE,CAAC;QAEtC,MAAM,SAAS,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC1D,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAC3D,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAE3D,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;YAC3C,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AACjC,YAAA,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACzC,YAAA,SAAS,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAEzC,YAAA,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AACtC,YAAA,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAC1C,YAAA,UAAU,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;AAE1C,YAAA,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AAClC,SAAA;AAED,QAAA,QAAQ,CAAC,YAAY,CACjB,UAAU,EACV,IAAI,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AACvC,QAAA,QAAQ,CAAC,YAAY,CACjB,QAAQ,EACR,IAAI,eAAe,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;AACxC,QAAA,QAAQ,CAAC,YAAY,CACjB,WAAW,EACX,IAAI,eAAe,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;QAEzC,QAAQ,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC;AACrD,QAAA,OAAO,QAAQ,CAAC;KACnB;AAGO,IAAA,qBAAqB,CAAC,UAA4B,EAAA;AACtD,QAAA,UAAU,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AAEnD,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,KAAI;YAC3D,MAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;AACpE,YAAA,oBAAoB,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC,CAAC;AACxE,YAAA,oBAAoB,CAAC,UAAU,GAAG,EAAE,CAAC;AAErC,YAAA,oBAAoB,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzC,SAAC,CAAC,CAAC;AACH,QAAA,IAAI,CAAC,qBAAqB,GAAG,EAAE,CAAC;KACnC;AACJ;;MCxPY,QAAQ,CAAA;AAEjB,IAAA,WAAA,CAAoB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAGnC,IAAG,CAAA,GAAA,GAAe,EAAE,CAAC;KAFpB;AAID,IAAA,wBAAwB,CAAC,OAAe,EAAA;AACpC,QAAA,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC;YAAE,OAAO;QAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AAClD,QAAA,KAAK,MAAM,KAAK,IAAI,QAAQ,CAAC,MAAM,EAAE;YACjC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;AACvD,SAAA;KACJ;AAED,IAAA,WAAW,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAQ,GAAG,SAAS,EAAA;QAClE,MAAM,MAAM,GAAG,OAAO,CAAC;AACvB,QAAA,MAAM,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC;AACxD,QAAA,OAAO,GAAG,MAAM,CAAA,GAAA,EAAM,UAAU,CAAM,GAAA,EAAA,QAAQ,EAAE,CAAC;KACpD;IAGD,OAAO,GAAA;AACH,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,IAAG;AACnC,YAAA,KAAK,CAAC,UAAkB,GAAG,IAAI,CAAC;AAChC,YAAA,KAAK,CAAC,GAAW,GAAG,IAAI,CAAC;AAC9B,SAAC,CAAC,CAAC;AAEF,QAAA,IAAI,CAAC,GAAW,GAAG,IAAI,CAAC;KAC5B;AAEO,IAAA,WAAW,CAAC,OAAe,EAAA;AAC/B,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC1D,QAAA,IAAI,CAAC,QAAQ;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC1D,IAAI,CAAC,QAAQ,CAAC,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AACjE,QAAA,OAAO,QAA2B,CAAC;KACtC;IAEO,WAAW,CAAC,OAAe,EAAE,QAAyB,EAAA;AAC1D,QAAA,MAAM,YAAY,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAoB,CAAC;AACzD,QAAA,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG;AAChB,YAAA,UAAU,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC;YAC9D,GAAG,EAAE,IAAI,GAAG,EAAE;SACjB,CAAC;AACF,QAAA,OAAO,IAAI,CAAC,GAAG,CAAC,OAAO,CAAU,CAAC;KACrC;AAEO,IAAA,sBAAsB,CAAC,KAAY,EAAE,QAAyB,EAAE,KAAY,EAAA;AAChF,QAAA,IAAI,aAAa,GAAG,CAAC,CAAC,CAAC;AAEvB,QAAA,MAAM,aAAa,GAAG,KAAK,CAAC,aAAuB,CAAC;AACpD,QAAA,MAAM,aAAa,GAAG,KAAK,CAAC,KAAK,CAAC;QAClC,MAAM,WAAW,GAAG,aAAa,GAAG,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAEpD,QAAA,IAAI,WAAW,GAAG,CAAC,CAAC,CAAC;AACrB,QAAA,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;QAEnB,KAAK,IAAI,CAAC,GAAG,aAAa,EAAE,CAAC,IAAI,WAAW,EAAE,CAAC,EAAE,EAAE;YAC/C,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACtC,YAAA,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,SAA4B,CAAC;YACpE,MAAM,SAAS,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AAG1C,YAAA,IAAI,aAAa,KAAK,CAAC,CAAC,EAAE;gBACtB,aAAa,GAAG,SAAS,CAAC;gBAC1B,WAAW,GAAG,CAAC,CAAC;AACnB,aAAA;AAGD,YAAA,MAAM,eAAe,GAAG,CAAC,KAAK,WAAW,CAAC;AAC1C,YAAA,IAAI,eAAe,EAAE;AACjB,gBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;AACzE,gBAAA,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;gBACrC,MAAM;AACT,aAAA;YAGD,IAAI,aAAa,KAAK,SAAS;gBAAE,SAAS;AAK1C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;AAC7E,YAAA,SAAS,GAAG,CAAC,GAAG,CAAC,CAAC;AAClB,YAAA,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;YAGnC,aAAa,GAAG,SAAS,CAAC;YAC1B,WAAW,GAAG,CAAC,CAAC;AACnB,SAAA;KACJ;AAEO,IAAA,gBAAgB,CAAC,GAAyB,EAAE,EAAU,EAAE,QAAgB,EAAA;QAE5E,IAAI,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS,EAAE;AAC3B,YAAA,GAAG,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACnB,SAAA;QACD,MAAM,aAAa,GAAG,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAClC,IAAI,aAAa,KAAK,SAAS;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;AAGlF,QAAA,IAAI,aAAa,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;AACvC,YAAA,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC;AAChC,SAAA;AACD,QAAA,OAAO,aAAa,CAAC,QAAQ,CAAC,CAAC;KAClC;AAEJ;;MC1IY,WAAW,CAAA;AAGpB,IAAA,OAAO,oBAAoB,CAAC,OAAe,EAAE,GAAa,EAAE,aAAqB,EAAE,KAAU,EAAE,OAAO,GAAG,IAAI,EAAA;QACzG,MAAM,cAAc,GAAQ,EAAE,CAAC;AAC/B,QAAA,KAAK,MAAM,SAAS,IAAI,GAAG,EAAE;YACzB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACvC,YAAA,IAAI,CAAC,KAAK;gBAAE,SAAS;AACrB,YAAA,MAAM,KAAK,GAAG,KAAK,CAAC,aAAa,CAAC,CAAC;AACnC,YAAA,IAAI,CAAC,KAAK;gBAAE,SAAS;AACrB,YAAA,WAAW,CAAC,aAAa,CAAC,KAAK,EAAE,cAAc,EAAE,aAAa,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;AACnF,SAAA;AACD,QAAA,OAAO,cAAc,CAAC;KACzB;IAEO,OAAO,aAAa,CAAC,KAAe,EAAE,cAAmB,EAAE,aAAqB,EAAE,KAAU,EAAE,OAAgB,EAAA;AAClH,QAAA,MAAM,KAAK,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/B,KAAK,IAAI,IAAI,GAAG,CAAC,EAAE,IAAI,GAAG,KAAK,EAAE,IAAI,EAAE,EAAE;AACrC,YAAA,MAAM,SAAS,GAAG,IAAI,GAAG,CAAC,CAAC;AAC3B,YAAA,MAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;YAC/B,MAAM,GAAG,GAAG,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;YACjC,KAAK,IAAI,CAAC,GAAG,KAAK,EAAE,CAAC,IAAI,GAAG,EAAE,CAAC,EAAE,EAAE;AAC/B,gBAAA,IAAG,OAAO;oBAAE,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAChD,qBAAA;AACD,oBAAA,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC;AAAE,wBAAA,cAAc,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC;AACvE,oBAAA,cAAc,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3D,iBAAA;AACJ,aAAA;AACJ,SAAA;KACJ;AACJ;;MCvBY,aAAa,CAAA;AAItB,IAAA,WAAA,CAAoB,KAAe,EAAU,KAAe,EAAU,OAAgB,EAAU,GAAe,EAAA;QAA3F,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAAU,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAAU,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;QAAU,IAAG,CAAA,GAAA,GAAH,GAAG,CAAY;QAFvG,IAAS,CAAA,SAAA,GAAa,EAAE,CAAC;KAGhC;IAED,YAAY,CAAC,MAAoB,EAAE,QAAgB,EAAA;QAC/C,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;YAAE,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACzF,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;AAAE,YAAA,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACrE,QAAA,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACrC,QAAA,IAAI,CAAC,yBAAyB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;AAC7D,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;AAC9D,QAAA,IAAI,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;QAC3C,IAAI,MAAM,CAAC,QAAQ;YAAE,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;QACjE,IAAI,MAAM,CAAC,KAAK;AAAE,YAAA,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAC3C,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;KACtC;IAED,OAAO,GAAA;AACH,QAAA,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;IAEO,gBAAgB,CAAC,MAAoB,EAAE,QAAgB,EAAA;AAC3D,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;AACrD,QAAA,MAAM,UAAU,GAAG,IAAI,cAAc,EAAE,CAAC;AACxC,QAAA,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACnD,IAAI,CAAC,MAAM,CAAC,QAAQ;AAAE,YAAA,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AACrE,QAAA,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,UAAU,EAAE,MAAM,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAW,CAAC;AAC/E,QAAA,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,MAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AACrC,QAAA,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,EAAU,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;AAC/D,QAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACnB;IAGO,0BAA0B,CAAC,UAA0B,EAAE,KAAW,EAAA;AACtE,QAAA,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AACxE,QAAA,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACpE,QAAA,UAAU,CAAC,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;AAC1E,QAAA,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAC3B;IAGO,sBAAsB,CAAC,UAA0B,EAAE,KAAW,EAAA;AAClE,QAAA,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AACtE,QAAA,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;KAChC;IAGO,aAAa,CAAC,MAAoB,EAAE,QAAgB,EAAA;AACxD,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAA2B,CAAC;QACzE,IAAI,MAAM,CAAC,cAAc,EAAE;AACvB,YAAA,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AACtB,YAAA,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;YAC3B,OAAO;AACV,SAAA;AACD,QAAA,MAAM,eAAe,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;QAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;QAC/C,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KAChD;IAEO,yBAAyB,CAAC,MAAoB,EAAE,QAAgB,EAAA;AACpE,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;AACrD,QAAA,MAAM,UAAU,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;AAChC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnD,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,CAAC,CAAC;AAC1D,SAAA;KACJ;AAIO,IAAA,gBAAgB,CAAC,MAAoB,EAAE,QAAgB,EAAE,aAAqB,EAAE,UAAe,EAAA;AACnG,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAC7C,QAAA,MAAM,oBAAoB,GAAG,WAAW,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,EAAE,aAAa,EAAE,KAAK,CAAa,CAAC;AAE5H,QAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,oBAAoB,EAAE,aAAa,EAAE,UAAU,CAAC,CAAC;AACxF,SAAA;AAAM,aAAA;AACH,YAAA,oBAAoB,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;AACrE,SAAA;KACJ;AAEO,IAAA,oBAAoB,CAAC,QAAgB,EAAE,cAAwB,EAAE,KAAa,EAAE,UAAe,EAAA;QACnG,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;AAC3D,QAAA,YAAY,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,CAAC;QACvC,IAAI,kBAAkB,GAAG,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;AACjE,QAAA,UAAU,CAAC,KAAK,IAAI,cAAc,CAAC,MAAM,CAAC;AAC1C,QAAA,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,IAAI,QAAQ,GAAG,kBAAkB,CAAC;AAClC,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;YAChD,MAAM,GAAG,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;YAC3C,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC,CAAC;AAChF,YAAA,YAAY,CAAC,KAAK,IAAI,cAAc,CAAC,MAAM,CAAC;AAC/C,SAAA;KACJ;IAEO,eAAe,CAAC,QAAgB,EAAE,UAAkB,EAAA;AACxD,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,QAA2B,CAAC;AACzE,QAAA,OAAO,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;KACtC;AAEO,IAAA,WAAW,CAAC,QAAwB,EAAA;QACxC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAI;AAC9B,YAAA,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AAChB,YAAA,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;AACpB,SAAC,CAAC,CAAC;KACN;AACJ;;MCpGY,aAAa,CAAA;IAOtB,WAAY,CAAA,KAAe,EAAE,GAAe,EAAA;QAHpC,IAAO,CAAA,OAAA,GAAY,EAAE,CAAC;AAI1B,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;AACjC,QAAA,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;KACrF;IAED,aAAa,GAAA;QACT,OAAO,IAAI,CAAC,OAAO,CAAA;KACtB;AAED,IAAA,SAAS,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAiB,EAAA;AAC7D,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;KACtC;AAED,IAAA,YAAY,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAiB,EAAA;AAChE,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACtC,QAAA,IAAI,CAAC,MAAM;YAAE,OAAO;AACpB,QAAA,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM;AAAE,YAAA,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACvD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,EAAE,CAAC;QACrC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;AAClC,QAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AAE/B,QAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KACjC;AAED,IAAA,YAAY,CAAC,MAAoB,EAAA;AAC7B,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;QACpF,OAAO,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;KAC5D;AAED,IAAA,gBAAgB,CAAC,OAAe,EAAE,GAAa,EAAE,QAAiB,EAAE,QAAmB,EAAA;AACnF,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;YAAE,OAAO;QAEpC,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC;AAC/C,QAAA,GAAG,CAAC,OAAO,CAAC,CAAC,EAAE,KAAI;AACf,YAAA,IAAG,WAAW,CAAC,GAAG,CAAC,EAAE,CAAC;AAAE,gBAAA,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACnD,SAAC,CAAC,CAAA;QAEF,OAAO,IAAI,CAAC,YAAY,CAAC;YACrB,OAAO;AACP,YAAA,cAAc,EAAE,IAAI;YACpB,QAAQ;YACR,QAAQ;YACR,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG;AACpC,YAAA,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC;YAC5B,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,MAAkB;AACxD,SAAA,CAAC,CAAC;KACN;AAED,IAAA,WAAW,CAAC,OAAe,EAAE,QAAiB,EAAE,QAAmB,EAAA;AAC/D,QAAA,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC/D,QAAA,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;YAAE,OAAO;QACpC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;AACnC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC3D,QAAA,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;KAChC;IAGD,OAAO,GAAA;AACH,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;AACrB,QAAA,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;AAE7B,QAAA,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,IAAG;AACxC,YAAA,MAAM,CAAC,GAAW,GAAG,IAAI,CAAC;AAC3B,YAAA,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC/B,YAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AAClC,YAAA,IAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;AAAE,gBAAA,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;;gBACtD,IAAI,CAAC,OAAO,EAAE,CAAC;YACpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;AAClC,YAAA,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;AAC/B,YAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,QAAe,CAAC;YACzC,IAAG,IAAI,CAAC,iBAAiB;gBAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACnD,YAAA,MAAM,CAAC,IAAY,GAAG,IAAI,CAAC;AAChC,SAAC,CAAC,CAAC;AACF,QAAA,IAAI,CAAC,OAAe,GAAG,IAAI,CAAC;KAChC;AAEO,IAAA,WAAW,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAQ,GAAG,SAAS,EAAA;QAC1E,MAAM,MAAM,GAAG,OAAO,CAAC;AACvB,QAAA,MAAM,UAAU,GAAG,QAAQ,GAAG,QAAQ,CAAC,IAAI,GAAG,SAAS,CAAC;AACxD,QAAA,OAAO,GAAG,MAAM,CAAA,GAAA,EAAM,UAAU,CAAM,GAAA,EAAA,QAAQ,EAAE,CAAC;KACpD;AACJ;;AClGM,MAAM,UAAU,GAAG,WAAW,CAAC;AAmF/B,MAAM,UAAU,GAAG;AACtB,IAAA,UAAU,EAAE;AACR,QAAA,IAAI,EAAE,gBAAgB;AACtB,QAAA,QAAQ,EAAE,gBAAgB;AAC1B,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,GAAG,EAAE,UAAU;AAClB,KAAA;AACD,IAAA,OAAO,EAAE;AACL,QAAA,IAAI,EAAE,iCAAiC;AACvC,QAAA,QAAQ,EAAE,mBAAmB;AAC7B,QAAA,OAAO,EAAE,iBAAiB;AAC1B,QAAA,GAAG,EAAE,UAAU;AAClB,KAAA;AACD,IAAA,KAAK,EAAE;AACH,QAAA,IAAI,EAAE,yBAAyB;AAC/B,QAAA,QAAQ,EAAE,4BAA4B;AACtC,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,GAAG,EAAE,UAAU;AAClB,KAAA;AACD,IAAA,SAAS,EAAE;AACP,QAAA,IAAI,EAAE,wBAAwB;AAC9B,QAAA,QAAQ,EAAE,kBAAkB;AAC5B,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,GAAG,EAAE,aAAa;AACrB,KAAA;AACD,IAAA,IAAI,EAAE;AACF,QAAA,IAAI,EAAE,mBAAmB;AACzB,QAAA,QAAQ,EAAE,cAAc;AACxB,QAAA,OAAO,EAAE,gBAAgB;AACzB,QAAA,GAAG,EAAE,SAAS;AACjB,KAAA;CACJ;;MC9HY,mBAAmB,CAAA;AAE5B,IAAA,WAAA,CAAsB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;KACpC;IAED,MAAM,eAAe,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;AACvE,QAAA,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC;KAClF;IAED,MAAM,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;AACzE,QAAA,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;KACjF;IAED,MAAM,sBAAsB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;AAC9E,QAAA,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;KACtF;IAES,MAAM,cAAc,CAAC,OAAe,EAAE,IAAU,EAAE,UAAe,EAAE,iBAA2B,EAAA;AACpG,QAAA,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC;AAC5F,QAAA,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;KAC5F;IAES,MAAM,WAAW,CAAC,OAAe,EAAE,IAAU,EAAE,UAAe,EAAE,SAAgB,EAAE,iBAA2B,EAAA;QACnH,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,IAAI,QAAQ,IAAI,SAAS;YAAE,OAAO;AAClC,QAAA,MAAM,IAAI,GAAG,SAAS,CAAC,GAAiB,CAAC;QACzC,MAAM,KAAK,GAAU,EAAE,CAAC;AACxB,QAAA,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACpC,YAAA,MAAM,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;AACxC,YAAA,IAAI,iBAAiB,EAAE;AACnB,gBAAA,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAQ,CAAC;gBAChF,IAAI,GAAG,EAAE,GAAG,UAAU,EAAE,GAAG,IAAI,EAAE,CAAC;AACrC,aAAA;AACD,YAAA,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,iBAAiB,CAAC,CAAC;AACxE,YAAA,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACpB,SAAA;AACA,QAAA,IAAI,CAAC,IAAI,CAAY,GAAG,KAAK,CAAC;KAClC;IAES,OAAO,CAAC,OAAe,EAAE,EAAU,EAAA;QACzC,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC/C,OAAO;AACH,YAAA,SAAS,EAAE,EAAE;AACb,YAAA,IAAI,EAAE,QAAQ;AACd,YAAA,QAAQ,EAAE,EAAE;SACf,CAAC;KACL;IAES,MAAM,oBAAoB,CAAC,OAAe,EAAA;QAChD,MAAM,UAAU,GAAQ,EAAE,CAAC;AAC3B,QAAA,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;AACjE,QAAA,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;AAC9D,QAAA,OAAO,UAAU,CAAC;KACrB;AAES,IAAA,SAAS,CAAC,MAAW,EAAE,SAAgB,EAAE,GAAQ,EAAA;QACvD,MAAM,QAAQ,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC;QAC/C,MAAM,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;AAChE,QAAA,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,SAAS,EAAE;AAC/B,YAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,OAAO,CAAC;AAC9B,SAAA;AAAM,aAAA;AACH,YAAA,MAAM,CAAC,QAAQ,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACvD,SAAA;KACJ;AAES,IAAA,UAAU,CAAC,GAAQ,EAAE,SAAgB,EAAE,GAAa,EAAA;QAC1D,MAAM,OAAO,GAAG,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACxC,IAAG,CAAC,OAAO,EAAE;YACT,OAAO,OAAO,CAAC,IAAI,CAAC,CAAA,mBAAA,EAAsB,GAAG,CAAC,SAAS,CAA0B,wBAAA,CAAA,CAAC,CAAC;AACtF,SAAA;AACD,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC;AAAE,YAAA,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;;AAChD,YAAA,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;KACtD;AAES,IAAA,OAAO,SAAS,CAAC,EAAU,EAAE,GAAQ,EAAE,SAAgB,EAAA;QAC7D,MAAM,YAAY,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;AAC5C,QAAA,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;AAC7B,YAAA,MAAM,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC;AACtD,YAAA,OAAO,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;AAC9B,SAAA;AACD,QAAA,OAAO,YAAY,CAAC,KAAK,KAAK,EAAE,CAAC;KACpC;IAES,OAAO,aAAa,CAAC,EAAU,EAAA;QACrC,OAAO;AACH,YAAA,SAAS,EAAE,EAAE;AACb,YAAA,IAAI,EAAE,YAAY;AAClB,YAAA,QAAQ,EAAE,EAAE;SACf,CAAC;KACL;IAED,MAAM,WAAW,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAE,QAAe,EAAA;KACvF;AAES,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,MAAW,EAAE,SAAgB,EAAA;KACvE;IAES,MAAM,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;KACtF;IAES,WAAW,CAAC,OAAe,EAAE,EAAU,EAAA;KAChD;AACJ;;ACpGK,MAAO,qBAAsB,SAAQ,mBAAmB,CAAA;IAC1D,MAAM,iBAAiB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAClE,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACzD;AAED,IAAA,MAAM,aAAa,CAAC,OAAe,EAAE,UAAkB,EAAA;AACnD,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;KAC5D;AAED,IAAA,MAAM,mBAAmB,CAAC,OAAe,EAAE,iBAA2B,EAAA;QAClE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AACxD,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;QAC9E,MAAM,SAAS,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAClC,MAAM,OAAO,GAAG,qBAAqB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC/D,QAAA,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;AACvE,QAAA,OAAO,OAAO,CAAC;KAClB;AAED,IAAA,MAAM,iBAAiB,CAAC,OAAe,EAAE,IAAY,EAAE,OAAgB,EAAA;QACnE,IAAI,KAAK,GAAa,EAAE,CAAC;AACzB,QAAA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACrE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE;YAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,QAAA,IAAI,CAAC,OAAO;AAAE,YAAA,OAAO,KAAK,CAAC;QAC3B,MAAM,MAAM,GAAU,EAAE,CAAC;AACzB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,SAAA;AACD,QAAA,OAAO,MAAM,CAAC;KACjB;IAEQ,MAAM,WAAW,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAE,QAAe,EAAA;AAC7F,QAAA,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACrF,MAAM,MAAM,GAAU,EAAE,CAAC;AACzB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACxC,MAAM,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;AAChF,SAAA;AACD,QAAA,OAAO,MAAM,CAAC;KACjB;IAEkB,WAAW,CAAC,OAAe,EAAE,EAAU,EAAA;AACtD,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;KACrD;AAEkB,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,MAAW,EAAE,SAAgB,EAAA;AAC7E,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;AAClF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1E,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAC1C,SAAA;KACJ;AAEO,IAAA,MAAM,wBAAwB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAgB,EAAA;AAChF,QAAA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,CAAC,CAAC;QAC/E,MAAM,GAAG,GAAa,EAAE,CAAC;AACzB,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE,YAAA,MAAM,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;AACpE,YAAA,IAAI,SAAS;gBAAE,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AACvD,SAAA;AACD,QAAA,OAAO,GAAG,CAAC;KACd;AACJ;;AC9DK,MAAO,mBAAoB,SAAQ,mBAAmB,CAAA;IAExD,MAAM,iBAAiB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAClE,QAAA,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,CAAC;KACzD;IAED,MAAM,aAAa,CAAC,OAAe,EAAA;AAC/B,QAAA,OAAO,EAAE,CAAC;KACb;AAED,IAAA,MAAM,mBAAmB,CAAC,OAAe,EAAE,iBAA2B,EAAA;QAClE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;AACxD,QAAA,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;AAC7E,QAAA,MAAM,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,OAAO,GAAG,mBAAmB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AAC7D,QAAA,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;AACvE,QAAA,OAAO,EAAE,GAAG,OAAO,EAAE,CAAC;KACzB;AAED,IAAA,MAAM,iBAAiB,CAAC,OAAe,EAAE,IAAY,EAAE,OAAgB,EAAA;AACnE,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;AACjD,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;QAChE,IAAI,CAAC,QAAQ,EAAE;AACX,YAAA,MAAM,IAAI,KAAK,CAAC,mBAAmB,IAAI,CAAA,CAAE,CAAC,CAAC;AAC9C,SAAA;QACD,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;KAC1D;IAEQ,MAAM,WAAW,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAE,QAAe,EAAA;AAC7F,QAAA,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;QACpF,MAAM,MAAM,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACrD,QAAA,IAAI,SAAS,EAAE;AACX,YAAA,MAAM,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC;AAC5E,SAAA;AACD,QAAA,OAAO,MAAM,CAAC;KACjB;IAEkB,WAAW,CAAC,OAAe,EAAE,EAAU,EAAA;AACtD,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC;KACvD;AAEkB,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,MAAW,EAAE,SAAgB,EAAA;AAC7E,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7E,QAAA,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAG;YACnB,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAC3C,SAAC,CAAC,CAAC;KACN;AAEO,IAAA,iBAAiB,CAAC,IAAkC,EAAE,QAAgB,EAAE,OAAgB,EAAA;QAC5F,MAAM,MAAM,GAAU,EAAE,CAAC;QACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,GAAG,IAAG;AAC5B,YAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,QAAQ,EAAE;AAC9C,gBAAA,MAAM,CAAC,IAAI,CAAC,OAAO,GAAG,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,GAAG,MAAM,CAAC,CAAC;AACvD,aAAA;AACL,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,MAAM,CAAC;KACjB;AAEO,IAAA,MAAM,wBAAwB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAgB,EAAA;AAChF,QAAA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;QAC1E,MAAM,GAAG,GAAa,EAAE,CAAC;AACzB,QAAA,KAAK,CAAC,OAAO,CAAC,IAAI,IAAG;AACjB,YAAA,MAAM,SAAS,GAAG,mBAAmB,CAAC,SAAS,CAAC,EAAE,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AACrE,YAAA,IAAI,SAAS;gBAAE,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AACzD,SAAC,CAAC,CAAC;AACH,QAAA,OAAO,GAAG,CAAC;KACd;IAEO,YAAY,CAAC,OAAe,EAAE,GAAa,EAAA;AAC/C,QAAA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;QACjD,MAAM,MAAM,GAAU,EAAE,CAAC;QACzB,GAAG,CAAC,OAAO,CAAC,EAAE,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAChD,QAAA,OAAO,MAAM,CAAC;KACjB;IAEO,wBAAwB,CAAC,OAAe,EAAE,UAAe,EAAA;QAC7D,IAAI,UAAU,IAAI,SAAS;YAAE,OAAO;QACpC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrC,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAClC,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;AAC9C,SAAA;KACJ;AAEO,IAAA,WAAW,CAAC,OAAe,EAAE,UAAe,EAAE,GAAW,EAAA;QAC7D,IAAI,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;YAChC,OAAO,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC;AAC9D,SAAA;AACD,QAAA,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,EAAE;YAC/C,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;AAC3D,SAAA;KACJ;AAEO,IAAA,oBAAoB,CAAC,OAAe,EAAE,UAAe,EAAE,GAAW,EAAA;AACtE,QAAA,UAAU,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAS,KAAI;AAChD,YAAA,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,EAAE;AACjB,gBAAA,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,gBAAA,IAAI,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAChD,aAAA;AACD,YAAA,OAAO,IAAI,CAAC;AAChB,SAAC,CAAC,CAAC;KACN;AACJ;;AC7GM,MAAM,aAAa,GAAG,IAAI,GAAG,CAAS;AAC3C,IAAA,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU;AAC3F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,UAAU;AAC5F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC7F,IAAA,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;AAC5F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;AAC5F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU;AAC7F,IAAA,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC5F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC9F,IAAA,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC5F,IAAA,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,UAAU,EAAE,UAAU;AACzF,IAAA,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC7F,IAAA,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS;AAC1F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;AAC5F,IAAA,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;AAC7F,IAAA,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS;AAC1D,CAAA,CAAC;;MCdW,kBAAkB,CAAA;IAE7B,OAAO,GAAA;AACJ,QAAA,IAAI,CAAC,MAAc,GAAG,IAAI,CAAC;KAC7B;AAED,IAAA,WAAA,CAAqB,MAAiB,EAAA;QAAjB,IAAM,CAAA,MAAA,GAAN,MAAM,CAAW;KACrC;AASD,IAAA,MAAM,sBAAsB,CAC1B,OAAe,EACf,OAAgB,EAChB,KAAiD,EAAA;QAEjD,MAAM,KAAK,GAAW,EAAE,CAAC;AACzB,QAAA,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;AAChE,QAAA,OAAO,KAAK,CAAC;KACd;IAEO,MAAM,oBAAoB,CAChC,OAAe,EACf,KAAa,EACb,OAAgB,EAChB,KAAiD,EAAA;QAEjD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC9D,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;QAChE,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,MAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC5D,QAAA,MAAM,UAAU,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC;QACtC,IAAI,SAAS,GAAG,GAAG,CAAC;QAEpB,IAAI,OAAO,GAAG,CAAC,CAAC;QAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,EAAE,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC9B,YAAA,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE;gBAE1B,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,EAAE,UAAU,CAAC,CAAC;AACpD,gBAAA,OAAO,EAAE,CAAC;AACX,aAAA;AACD,YAAA,IAAI,OAAO,IAAI,OAAO,GAAG,OAAO,EAAE;gBAChC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;gBACjF,UAAU,GAAG,EAAE,CAAC;gBAChB,OAAO,GAAG,CAAC,CAAC;AACb,aAAA;AACD,YAAA,IAAI,KAAK,IAAI,CAAC,GAAG,UAAU,GAAG,SAAS,EAAE;AACvC,gBAAA,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;gBACrB,SAAS,IAAI,GAAG,CAAC;AAClB,aAAA;AACF,SAAA;QAED,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC;KAClF;AAEO,IAAA,MAAM,eAAe,CAAC,OAAe,EAAE,EAAU,EAAE,UAAe,EAAA;QACxE,IAAI;AACF,YAAA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,MAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACtD,IAAI,KAAK,CAAC,IAAI,EAAE;AACd,gBAAA,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAO,CAAC,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3D,aAAA;AACD,YAAA,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACjC,YAAA,UAAU,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;AACxB,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACV,YAAA,OAAO,CAAC,GAAG,CAAC,kEAAkE,EAAE,CAAA,CAAE,CAAC,CAAC;AACrF,SAAA;KACF;AAEO,IAAA,oBAAoB,CAAC,KAAU,EAAA;QACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,KAAI;AACjC,YAAA,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,YAAA,IAAI,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS;AAAE,gBAAA,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;AAC5D,iBAAA,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC;gBAC3B,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,KAAI;AAC9B,oBAAA,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK;wBAAE,OAAO,IAAI,CAAC,KAAK,CAAC;AAC1C,oBAAA,OAAO,IAAI,CAAC;AACd,iBAAC,CAAC,CAAC;AACP,SAAC,CAAC,CAAC;KACJ;IAEO,MAAM,0BAA0B,CAAC,OAAe,EAAA;QACtD,OAAO;YACL,kBAAkB,EAAE,MAAM,IAAI,CAAC,MAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC;AACrE,YAAA,YAAY,EAAE,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC;SACpD,CAAC;KACH;IAEO,MAAM,iBAAiB,CAAC,OAAe,EAAA;QAC7C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACjD,QAAA,IAAI,SAAc,CAAC;AACnB,QAAA,MAAM,aAAa,GAAG,QAAQ,CAAC,eAAe,CAAC,cAAc,CAAC;AAC9D,QAAA,IAAI,aAAa;AAAE,YAAA,SAAS,GAAG,aAAa,CAAC,iBAAiB,CAAC,QAAQ,CAAC;;YACnE,SAAS,GAAG,QAAQ,CAAC,eAAe,CAAC,iBAAiB,CAAC,QAAQ,CAAC;AACrE,QAAA,MAAM,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAAU,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;AACzE,QAAA,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC;KACrB;IAEO,MAAM,WAAW,CAAC,OAAe,EAAA;AACvC,QAAA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;QACnF,MAAM,UAAU,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AAC1C,QAAA,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;KACvD;IAEO,MAAM,mBAAmB,CAAC,OAAe,EAAA;AAC/C,QAAA,MAAM,aAAa,GAAG,IAAI,GAAG,EAAU,CAAC;QACxC,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;AACjD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAC9C,YAAA,MAAM,QAAQ,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;AAEnC,YAAA,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,MAAO,CAAC,kBAAkB,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;AACrE,YAAA,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;YAC3B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBAChC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC/B,aAAA;AACF,SAAA;AACD,QAAA,OAAO,aAAa,CAAC;KACtB;AACF;;MCjHY,eAAe,CAAA;AAOxB,IAAA,WAAA,CAAoB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,qBAAqB,CAAC,KAAK,CAAC,CAAC;QACpD,IAAI,CAAC,SAAS,GAAG,IAAI,mBAAmB,CAAC,KAAK,CAAC,CAAC;AAChD,QAAA,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC;AACrC,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC5D;IAED,YAAY,CAAC,QAAwB,EAAE,SAAiB,EAAA;QACpD,IAAI,CAAC,QAAQ,CAAC,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;AAClF,QAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;QACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAoB,CAAC;QACtE,OAAO,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KACnD;AAED,IAAA,MAAM,aAAa,CAAC,OAAe,EAAE,UAAkB,EAAA;QACnD,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,OAAO,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;KAC/D;IAED,MAAM,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;QACzE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC7E;AAED,IAAA,MAAM,iBAAiB,CAAC,OAAe,EAAE,IAAY,EAAE,OAAgB,EAAA;QACnE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACtE;IAED,MAAM,eAAe,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;QACvE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC3E;IAED,MAAM,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;QACzE,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAC7E;IAED,MAAM,sBAAsB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAS,GAAG,KAAK,EAAA;QAC9E,IAAI,CAAC,kBAAkB,EAAE,CAAC;AAC1B,QAAA,OAAO,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,OAAO,EAAE,SAAS,EAAE,SAAS,CAAC,CAAC;KAClF;AAED,IAAA,MAAM,mBAAmB,CAAC,OAAe,EAAE,iBAA2B,EAAA;QAClE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,iBAAiB,EAAE;AAC1C,YAAA,OAAO,CAAC,IAAI,CAAC,2GAA2G,CAAC,CAAC;AAC7H,SAAA;QACD,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;KAClF;IAEO,kBAAkB,GAAA;QACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;KAC9E;AAEJ;;MCrEY,WAAW,CAAA;AAEpB,IAAA,WAAA,CAAoB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;AAC/B,QAAA,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;KACtB;IAED,MAAM,WAAW,CAAC,MAAyB,EAAA;QAC7C,KAAK,IAAI,OAAO,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YACtC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE;AAC9C,gBAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC;gBAC/C,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,IAAI,CAAC,EAAE;oBACnC,MAAM,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC;AACzD,iBAAA;AACD,aAAA;AACD,SAAA;KACE;AAED,IAAA,MAAM,kBAAkB,CAAC,OAAe,EAAE,MAAyB,EAAA;QAC/D,MAAM,MAAM,GAAG,EAAE,CAAC;AAClB,QAAA,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;AAChE,QAAA,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC,YAAA,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AAC5B,YAAA,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;AACxE,YAAA,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAE1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE;gBAAE,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;AACjE,SAAA;QACD,IAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,EAAE;YAGnC,MAAM,MAAM,CAAC,WAAW,CAAC,qBAAqB,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;AACnE,SAAA;QACD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC;KAC7C;AACJ;;MCvCY,UAAU,CAAA;AAKnB,IAAA,iBAAiB,CAAC,iBAAsB,EAAE,iBAAsB,EAAE,kBAAuB,EAAA;AACrF,QAAA,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC3C,QAAA,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;AAC3C,QAAA,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,iBAAiB,EAAE,CAAC;KAC5B;AAED,IAAA,iBAAiB,CAAC,QAAwB,EAAA;QACtC,IAAI,IAAI,CAAC,iBAAiB;YAEtB,QAAQ,CAAC,iBAAiB,EAAE,CAAC;KACpC;IAEO,iBAAiB,GAAA;AACrB,QAAA,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,IAAI,CAAC,kBAAkB;YAAE,OAAO;QAE3F,cAAc,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QAEpE,cAAc,CAAC,SAAS,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACpE,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC;KACpD;AACJ;;ACnBD,IAAY,aAuDX,CAAA;AAvDD,CAAA,UAAY,aAAa,EAAA;AAErB,IAAA,aAAA,CAAA,oBAAA,CAAA,GAAA,oBAAyC,CAAA;AACzC,IAAA,aAAA,CAAA,2BAAA,CAAA,GAAA,2BAAuD,CAAA;AACvD,IAAA,aAAA,CAAA,uBAAA,CAAA,GAAA,uBAA+C,CAAA;AAC/C,IAAA,aAAA,CAAA,0BAAA,CAAA,GAAA,0BAAqD,CAAA;AACrD,IAAA,aAAA,CAAA,wBAAA,CAAA,GAAA,wBAAiD,CAAA;AACjD,IAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AAGnB,IAAA,aAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,aAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AAC/B,IAAA,aAAA,CAAA,MAAA,CAAA,GAAA,MAAa,CAAA;AACb,IAAA,aAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC,CAAA;AACnC,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,SAAA,CAAA,GAAA,SAAmB,CAAA;AACnB,IAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC,CAAA;AACvC,IAAA,aAAA,CAAA,WAAA,CAAA,GAAA,WAAuB,CAAA;AACvB,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC,CAAA;AACjC,IAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,kBAAqC,CAAA;AACrC,IAAA,aAAA,CAAA,oBAAA,CAAA,GAAA,oBAAyC,CAAA;AACzC,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,2BAAA,CAAA,GAAA,2BAAuD,CAAA;AACvD,IAAA,aAAA,CAAA,uBAAA,CAAA,GAAA,uBAA+C,CAAA;AAC/C,IAAA,aAAA,CAAA,gBAAA,CAAA,GAAA,gBAAiC,CAAA;AACjC,IAAA,aAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AAC/B,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC,CAAA;AACnC,IAAA,aAAA,CAAA,0BAAA,CAAA,GAAA,0BAAqD,CAAA;AACrD,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC,CAAA;AACnC,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,aAAA,CAAA,qBAAA,CAAA,GAAA,qBAA2C,CAAA;AAC3C,IAAA,aAAA,CAAA,kBAAA,CAAA,GAAA,kBAAqC,CAAA;AACrC,IAAA,aAAA,CAAA,qBAAA,CAAA,GAAA,qBAA0C,CAAA;AAG1C,IAAA,aAAA,CAAA,OAAA,CAAA,GAAA,OAAe,CAAA;AACf,IAAA,aAAA,CAAA,yBAAA,CAAA,GAAA,yBAAmD,CAAA;AAGnD,IAAA,aAAA,CAAA,cAAA,CAAA,GAAA,cAA6B,CAAA;AAC7B,IAAA,aAAA,CAAA,sBAAA,CAAA,GAAA,sBAA6C,CAAA;AAC7C,IAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC,CAAA;AACvC,IAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC,CAAA;AACvC,IAAA,aAAA,CAAA,wBAAA,CAAA,GAAA,wBAAiD,CAAA;AACjD,IAAA,aAAA,CAAA,iBAAA,CAAA,GAAA,iBAAmC,CAAA;AACnC,IAAA,aAAA,CAAA,qBAAA,CAAA,GAAA,qBAA2C,CAAA;AAC3C,IAAA,aAAA,CAAA,mBAAA,CAAA,GAAA,mBAAuC,CAAA;AACvC,IAAA,aAAA,CAAA,eAAA,CAAA,GAAA,eAA+B,CAAA;AACnC,CAAC,EAvDW,aAAa,KAAb,aAAa,GAuDxB,EAAA,CAAA,CAAA,CAAA;AAED,IAAY,UAKX,CAAA;AALD,CAAA,UAAY,UAAU,EAAA;AAClB,IAAA,UAAA,CAAA,aAAA,CAAA,GAAA,aAA2B,CAAA;AAC3B,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACjB,IAAA,UAAA,CAAA,YAAA,CAAA,GAAA,YAAyB,CAAA;AACzB,IAAA,UAAA,CAAA,QAAA,CAAA,GAAA,QAAiB,CAAA;AACrB,CAAC,EALW,UAAU,KAAV,UAAU,GAKrB,EAAA,CAAA,CAAA;;MCpEY,MAAM,CAAA;AAIf,IAAA,WAAA,CAAY,MAAwB,EAAA;QAF5B,IAAK,CAAA,KAAA,GAAyB,EAAE,CAAC;AAGrC,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACzB,QAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,OAAO,CAAC,CAAC,GAAG,KAAK,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;KACxD;IAED,IAAI,GAAA;QACA,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAED,IAAA,GAAG,CAAC,KAAa,EAAA;AACb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC5B;AACJ;;MCjBY,WAAW,CAAA;AAMpB,IAAA,WAAA,CAAY,MAA6B,EAAA;AACrC,QAAA,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,aAAa,CAAC;AAC3C,QAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC,iBAAiB,CAAC;AACnD,QAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,YAAY,CAAC;AACzC,QAAA,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,gBAAgB,CAAC;KACpD;IAED,aAAa,GAAA;QACT,OAAO,IAAI,CAAC,cAAc,CAAC;KAC9B;IAED,iBAAiB,GAAA;QACb,OAAO,IAAI,CAAC,kBAAkB,CAAC;KAClC;IAED,YAAY,GAAA;QACR,OAAO,IAAI,CAAC,aAAa,CAAC;KAC7B;IAED,gBAAgB,GAAA;QACZ,OAAO,IAAI,CAAC,iBAAiB,CAAC;KACjC;AACJ;;MC1BY,QAAQ,CAAA;IAIjB,WAAY,CAAA,UAAsB,EAAE,QAA4B,EAAA;AAC5D,QAAA,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;KACvE;AACJ;;MCTY,cAAc,CAAA;IAIvB,WAAY,CAAA,UAAsB,EAAE,MAAwB,EAAA;QAFpD,IAAK,CAAA,KAAA,GAAsC,EAAE,CAAC;AAGlD,QAAA,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC;AACzB,QAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QACvG,IAAI,CAAC,OAAO,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,mBAAmB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;KACtF;IAED,IAAI,GAAA;QACA,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;AAED,IAAA,GAAG,CAAC,KAAa,EAAA;AACb,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC5B;AACJ;;MCnBY,kBAAkB,CAAA;AAK3B,IAAA,WAAA,CAAY,QAA6B,EAAA;QACrC,IAAI,CAAC,KAAK,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE,QAAA,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,CAAC;AAChC,QAAA,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC;KAC3C;AACJ,CAAA;MAEY,qBAAqB,CAAA;IAC9B,OAAO,GAAG,CAAC,QAA4B,EAAA;QACnC,OAAO,IAAI,mBAAmB,CAAC;YAC3B,KAAK,EAAE,IAAI,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzE,OAAO,EAAE,QAAQ,CAAC,OAAO;YACzB,WAAW,EAAE,QAAQ,CAAC,WAAW;AACjC,YAAA,IAAI,EAAE,UAAU;AACnB,SAAA,CAAC,CAAA;KACL;AACJ;;MCrBY,kBAAkB,CAAA;AAO3B,IAAA,WAAA,CAAY,QAAwB,EAAA;;AAChC,QAAA,IAAI,CAAC,QAAQ,GAAG,CAAA,MAAC,QAAQ,CAAC,UAAU,CAAC,QAA4B,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,KAAI,EAAE,CAAC;AAC/E,QAAA,IAAI,CAAC,MAAM,GAAG,CAAA,MAAC,QAAQ,CAAC,UAAU,CAAC,MAA0B,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,KAAI,EAAE,CAAC;AAC3E,QAAA,IAAI,CAAC,SAAS,GAAG,CAAA,MAAC,QAAQ,CAAC,UAAU,CAAC,SAA6B,MAAA,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAE,KAAK,KAAI,EAAE,CAAC;AACjF,QAAA,IAAI,CAAC,KAAK,GAAG,CAAA,CAAA,EAAA,GAAA,QAAQ,CAAC,KAAK,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,KAAI,EAAE,CAAC;AACzC,QAAA,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;KACjC;AACJ,CAAA;MAEY,qBAAqB,CAAA;IAC9B,OAAO,GAAG,CAAC,UAA8B,EAAA;AACrC,QAAA,MAAM,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;AAClC,QAAA,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,IAAI,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;AACvF,QAAA,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,YAAY,CAAC,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;AACtF,QAAA,qBAAqB,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;AAClF,QAAA,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;AAC5C,QAAA,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;AAChC,QAAA,OAAO,IAAI,CAAC;KACf;IAEO,OAAO,GAAG,CAAC,IAAoB,EAAE,IAAY,EAAE,IAAuB,EAAE,IAAY,EAAA;AACxF,QAAA,IAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;AAChB,YAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAC5D,SAAA;KACJ;AACJ;;MC7BY,cAAc,CAAA;AAMvB,IAAA,WAAA,CAAY,KAAe,EAAA;QAF3B,IAAS,CAAA,SAAA,GAA0B,EAAE,CAAC;AAGlC,QAAA,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,OAAO,CAAC;QAC7B,IAAI,CAAC,QAAQ,GAAG,IAAI,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACvD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;AAC/B,YAAA,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAG;gBACzB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,GAA0B,CAAC,CAAC,CAAC;AAC5E,aAAC,CAAC,CAAC;AACN,SAAA;AAAM,aAAA;AACH,YAAA,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,KAAK,CAAC,QAA+B,CAAC,CAAC,CAAC;AACtF,SAAA;KACJ;AACJ,CAAA;MAEY,iBAAiB,CAAA;IAE1B,OAAO,GAAG,CAAC,UAA0B,EAAA;AACjC,QAAA,MAAM,KAAK,GAAG,IAAI,QAAQ,EAAE,CAAC;AAC7B,QAAA,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC;QACnC,KAAK,CAAC,QAAQ,GAAG,qBAAqB,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAChE,QAAA,iBAAiB,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;AAClD,QAAA,OAAO,KAAK,CAAC;KAChB;AAEO,IAAA,OAAO,YAAY,CAAC,UAA0B,EAAE,KAAe,EAAA;AACnE,QAAA,KAAK,CAAC,QAAQ,GAAG,EAAE,CAAC;AACpB,QAAA,MAAM,IAAI,GAAG,KAAK,CAAC,QAAsB,CAAC;AAC1C,QAAA,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,IAAG;YAC/B,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AAC9C,SAAC,CAAC,CAAC;KACN;AACJ;;MChCY,UAAU,CAAA;AAEnB,IAAA,eAAe,CAAI,MAAuB,EAAA;AACtC,QAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3B,QAAA,MAAM,UAAU,GAAqB,EAAE,IAAI,EAAE,CAAC;QAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACjC,SAAA;AACD,QAAA,OAAO,UAAU,CAAC;KACrB;AAED,IAAA,iBAAiB,CAAC,MAAwB,EAAA;AACtC,QAAA,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;KAC7B;AAED,IAAA,oBAAoB,CAAC,QAA2B,EAAA;AAC5C,QAAA,MAAM,aAAa,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;AAC/C,QAAA,MAAM,iBAAiB,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;AACvD,QAAA,MAAM,YAAY,GAAG,QAAQ,CAAC,YAAY,EAAE,CAAC;AAC7C,QAAA,MAAM,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,EAAE,CAAC;QACrD,OAAO;YACH,aAAa;YACb,iBAAiB;YACjB,YAAY;YACZ,gBAAgB;SACM,CAAC;KAC9B;AAED,IAAA,sBAAsB,CAAC,QAA+B,EAAA;AAClD,QAAA,OAAO,IAAI,WAAW,CAAC,QAAQ,CAAC,CAAC;KACpC;AAED,IAAA,iBAAiB,CAAC,QAAwB,EAAA;QACtC,OAAO;YACH,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,UAAU,EAAE,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,UAAU,CAAC;SAClC,CAAC;KAC3B;AAED,IAAA,mBAAmB,CAAC,QAA4B,EAAA;AAC5C,QAAA,OAAO,IAAI,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;KACvC;AAED,IAAA,uBAAuB,CAAC,MAAoC,EAAA;AACxD,QAAA,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;AAC3B,QAAA,MAAM,UAAU,GAAqB,EAAE,IAAI,EAAE,CAAC;QAC9C,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;YAC3B,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAC/B,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;AACpD,SAAA;AACD,QAAA,OAAO,UAAU,CAAC;KACrB;AAED,IAAA,yBAAyB,CAAC,MAAwB,EAAA;AAC9C,QAAA,OAAO,IAAI,cAAc,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;KAC3C;AAED,IAAA,iBAAiB,CAAC,KAAe,EAAA;AAC7B,QAAA,OAAO,IAAI,cAAc,CAAC,KAAK,CAAC,CAAC;KACpC;AAED,IAAA,mBAAmB,CAAC,KAAqB,EAAA;AACrC,QAAA,OAAO,iBAAiB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACvC;AACJ;;MCnEY,eAAe,CAAA;AAIxB,IAAA,WAAA,CAAoB,OAAyB,EAAA;QAAzB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;AAF7C,QAAA,IAAA,CAAA,GAAG,GAAG,UAAU,CAAC,UAAU,CAAC;KAG3B;IAED,YAAY,CAAC,QAAwB,EAAE,SAAiB,EAAA;QACpD,IAAI,CAAC,QAAQ,CAAC,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,2CAA2C,CAAC,CAAC;AAClF,QAAA,MAAM,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC;QACtC,MAAM,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAoB,CAAC;QACtE,OAAO,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC;KACnD;IAED,aAAa,CAAC,OAAe,EAAE,UAAkB,EAAA;QAC7C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;KAC/F;AAED,IAAA,iBAAiB,CAAC,OAAe,EAAE,IAAY,EAAE,OAAgB,EAAA;QAC7D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;KACtG;AAED,IAAA,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAkB,EAAA;QACpE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;KAC7G;AAED,IAAA,sBAAsB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAkB,EAAA;QACzE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,sBAAsB,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;KAClH;AAED,IAAA,eAAe,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAkB,EAAA;QAClE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;KAC3G;AAED,IAAA,iBAAiB,CAAC,OAAe,EAAE,SAAiB,EAAE,SAAkB,EAAA;QACpE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;KAC7G;IAED,mBAAmB,CAAC,OAAe,EAAE,iBAA2B,EAAA;QAC5D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,mBAAmB,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;KAC5G;AACJ;;MCjCY,aAAa,CAAA;IAKtB,WAAoB,CAAA,OAAyB,EAAU,UAAsB,EAAA;QAAzD,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QAAU,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;AAF7E,QAAA,IAAA,CAAA,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC;KAGvB;AAED,IAAA,MAAM,IAAI,GAAA;AACN,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AACvB,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,IAAI,CAAC,CAAC;KAC7D;AAED,IAAA,MAAM,SAAS,CAAC,IAA0B,EAAE,QAAyB,EAAA;QACjE,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;KACtF;AAED,IAAA,MAAM,WAAW,CAAC,KAAkB,EAAE,QAAyB,EAAA;QAC3D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;KACzF;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;AACjC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACrF;AAED,IAAA,MAAM,aAAa,CAAC,OAAe,EAAE,UAAkB,EAAA;QACnD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,aAAa,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;KAC/F;AAED,IAAA,MAAM,WAAW,CAAC,OAAe,EAAE,iBAAyB,EAAA;AACxD,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,IAA2B,KAAI;YACrF,OAAO,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACxD,SAAC,CAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,iBAAiB,EAAE,CAAC,CAAC;KACpG;AAED,IAAA,MAAM,OAAO,CAAC,OAAe,EAAE,SAAiB,EAAE,OAAiB,EAAA;QAC/D,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;KACjG;IAED,MAAM,iBAAiB,CAAC,OAAe,EAAA;AACnC,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAwB,KAAI;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACrD,SAAC,CAAA;AACD,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,iBAAiB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACvF;IAED,MAAM,mBAAmB,CAAC,IAAW,EAAA;AACjC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,mBAAmB,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;KACtF;IAED,MAAM,gBAAgB,CAAC,OAAe,EAAA;AAClC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACtF;IAED,MAAM,mBAAmB,CAAC,QAAe,EAAA;AACpC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,mBAAmB,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;KAC3F;AAED,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,UAAe,EAAA;QAC5C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;KAC3F;AAED,IAAA,MAAM,WAAW,CAAC,OAAe,EAAE,IAAS,EAAA;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KACvF;AAED,IAAA,MAAM,cAAc,CAAC,OAAe,EAAE,SAAiB,EAAA;QACnD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;KAC/F;AAED,IAAA,MAAM,gBAAgB,CAAC,OAAe,EAAE,IAAiB,EAAA;QACrD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,gBAAgB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KAC5F;AAED,IAAA,MAAM,kBAAkB,CAAC,OAAe,EAAE,IAAY,EAAA;AAClD,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAwB,KAAI;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACrD,SAAC,CAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,kBAAkB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KAC9F;IAED,MAAM,WAAW,CAAC,OAAe,EAAA;AAC7B,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAwB,KAAI;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;AACrD,SAAC,CAAA;AACD,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACjF;AAED,IAAA,MAAM,yBAAyB,CAAC,OAAe,EAAE,oBAA8B,EAAA;AAC3E,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,yBAAyB,EAAE;YAC3E,OAAO;YACP,oBAAoB;AACvB,SAAA,CAAC,CAAC;KACN;IAED,MAAM,qBAAqB,CAAC,OAAe,EAAA;AACvC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KAC3F;AAED,IAAA,MAAM,cAAc,CAAC,GAAW,EAAE,IAAY,EAAA;QAC1C,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,cAAc,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;KACtF;AAED,IAAA,MAAM,aAAa,CAAC,GAAW,EAAE,IAAY,EAAA;QACzC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,aAAa,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC;KACrF;AAED,IAAA,MAAM,WAAW,CAAC,IAAS,EAAE,QAAa,EAAE,SAAc,EAAA;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;KACnG;IAED,MAAM,UAAU,CAAC,OAAe,EAAA;AAC5B,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,UAAU,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KAChF;AAED,IAAA,MAAM,eAAe,CAAC,OAAe,EAAE,YAAsC,EAAA;QACzE,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG;AACpD,YAAA,MAAM,EAAE,YAAY;AACpB,YAAA,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,mBAAmB;SAClD,CAAC;AACF,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACrF;AAED,IAAA,MAAM,wBAAwB,CAAC,OAAe,EAAE,KAAe,EAAE,YAAsC,EAAA;QACnG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG;AACpD,YAAA,MAAM,EAAE,YAAY;AACpB,YAAA,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,mBAAmB;SAClD,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,wBAAwB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;KACrG;IAED,MAAM,WAAW,CAAC,OAAe,EAAA;AAC7B,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACjF;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;AACjC,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,MAAwB,KAAI;YAClF,OAAO,IAAI,CAAC,UAAU,CAAC,yBAAyB,CAAC,MAAM,CAAC,CAAC;AAC7D,SAAC,CAAA;AACD,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,eAAe,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACrF;AAED,IAAA,MAAM,WAAW,CAAC,OAAe,EAAE,SAAiB,EAAA;AAChD,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAA4B,KAAI;YACtF,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;AACzD,SAAC,CAAA;QACD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC;KAC5F;IAED,MAAM,WAAW,CAAC,IAAY,EAAA;AAC1B,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,WAAW,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;KAC9E;AACJ;;MCnKY,kBAAkB,CAAA;AAI3B,IAAA,WAAA,CAAoB,OAAyB,EAAA;QAAzB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;AAH7C,QAAA,IAAA,CAAA,GAAG,GAAG,UAAU,CAAC,WAAW,CAAC;QAIzB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;KACnC;AAED,IAAA,MAAM,kBAAkB,GAAA;AACpB,QAAA,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;AACnC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,kBAAkB,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;KACxF;AAED,IAAA,MAAM,yBAAyB,GAAA;AAC3B,QAAA,MAAM,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;AACjD,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,yBAAyB,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;KACtG;AAED,IAAA,MAAM,qBAAqB,CAAE,OAAe,EAAE,KAAU,EAAA;QACpD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;KAClG;AAED,IAAA,MAAM,wBAAwB,CAAC,OAAe,EAAE,QAAa,EAAA;QACzD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,wBAAwB,EAAE,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;KACxG;AAED,IAAA,MAAM,sBAAsB,CAAC,OAAe,EAAE,IAAY,EAAA;QACtD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,sBAAsB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;KAClG;AACJ;;ACjCD,IAAY,WAGX,CAAA;AAHD,CAAA,UAAY,WAAW,EAAA;AACnB,IAAA,WAAA,CAAA,WAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAgB,CAAA;AAChB,IAAA,WAAA,CAAA,WAAA,CAAA,yBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,yBAAuB,CAAA;AAC3B,CAAC,EAHW,WAAW,KAAX,WAAW,GAGtB,EAAA,CAAA,CAAA,CAAA;MAEY,eAAe,CAAA;AACxB,IAAA,MAAM,IAAI,CAAC,IAAS,EAAE,EAAe,EAAA;QACjC,MAAM,IAAI,GAAG,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;AAChD,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;QAC3B,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,KAAI;AACxC,YAAA,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AAClE,SAAC,CAAC,CAAC;KACN;IAED,MAAM,IAAI,CAAC,EAAU,EAAA;QACjB,MAAM,IAAI,GAAG,eAAe,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;QAChD,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,KAAI;AACxC,YAAA,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AAC5D,SAAC,CAAC,CAAA;KACL;IAEO,YAAY,CAAC,IAAsB,EAAE,EAAe,EAAA;QACxD,IAAI,CAAC,eAAe,GAAG,YAAA;AACnB,YAAA,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;AACvB,YAAA,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,EAAC,OAAO,EAAE,IAAI,EAAC,CAAC,CAAC;AACzD,SAAC,CAAC;KACL;AAEO,IAAA,QAAQ,CAAC,IAAS,EAAE,IAAsB,EAAE,EAAe,EAAE,OAA6B,EAAA;AAC9F,QAAA,MAAM,EAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;AAC7D,QAAA,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;AACb,QAAA,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AAChB,QAAA,EAAE,CAAC,UAAU,GAAG,MAAM,eAAe,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;KAClE;AAEO,IAAA,QAAQ,CAAC,IAAsB,EAAE,EAAe,EAAE,OAA6B,EAAA;AACnF,QAAA,MAAM,EAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAC,GAAG,eAAe,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;QAC7D,MAAM,IAAI,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;QAC3B,MAAM,QAAQ,GAAG,MAAK;AAClB,YAAA,OAAO,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;AACtB,YAAA,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;AACxB,SAAC,CAAC;AACF,QAAA,EAAE,CAAC,UAAU,GAAG,MAAM,eAAe,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,CAAC;KACnE;AAEO,IAAA,OAAO,UAAU,CAAC,IAAsB,EAAE,EAAe,EAAA;AAC7D,QAAA,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;AACvB,QAAA,MAAM,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,WAAW,CAAC,CAAC;QACtD,MAAM,KAAK,GAAG,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;AAC5C,QAAA,OAAO,EAAC,EAAE,EAAE,EAAE,EAAE,KAAK,EAAC,CAAC;KAC1B;IAEO,OAAO,cAAc,CAAC,EAAe,EAAA;QACzC,OAAO,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;KAC3C;AAEO,IAAA,OAAO,OAAO,CAAC,EAAe,EAAE,EAAkB,EAAE,OAA6B,EAAA;QACrF,EAAE,CAAC,KAAK,EAAE,CAAC;QACX,OAAO,CAAC,SAAS,CAAC,CAAC;KACtB;AACJ;;MClDY,aAAa,CAAA;AAStB,IAAA,WAAA,CAAoB,OAAyB,EACzB,UAAsB,EACtB,GAAe,EACf,GAAoB,EAAA;QAHpB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAkB;QACzB,IAAU,CAAA,UAAA,GAAV,UAAU,CAAY;QACtB,IAAG,CAAA,GAAA,GAAH,GAAG,CAAY;QACf,IAAG,CAAA,GAAA,GAAH,GAAG,CAAiB;AAVxC,QAAA,IAAA,CAAA,kBAAkB,GAAuB;YACrC,CAAC,QAAQ,GAAG,IAAI;YAChB,CAAC,iBAAiB,GAAG,KAAK;SAC7B,CAAC;AAEF,QAAA,IAAA,CAAA,GAAG,GAAG,UAAU,CAAC,MAAM,CAAC;KAMvB;IAED,MAAM,uBAAuB,CAAC,MAA0B,EAAA;AACpD,QAAA,IAAI,CAAC,kBAAkB,GAAG,MAAM,CAAC;AACjC,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,uBAAuB,EAAE,EAAC,MAAM,EAAC,CAAC,CAAC;KAC1F;AAED,IAAA,MAAM,KAAK,CAAC,MAAW,EAAE,kBAA6B,EAAA;AAClD,QAAA,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,QAAwB,KAAI;AACnF,YAAA,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU;gBAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;AAC/E,SAAC,CAAC;AACF,QAAA,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,OAAO,MAAoB,KAAI;AACpF,YAAA,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAEjC,YAAA,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC;AAC3B,SAAC,CAAC;QACF,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,aAAa,CAAC,KAAK,EAAE,EAAC,MAAM,EAAE,kBAAkB,EAAC,CAAC,CAAC;KAC5F;AAED,IAAA,iBAAiB,CAAC,QAAgB,EAAA;KACjC;AAEO,IAAA,WAAW,CAAC,OAAe,EAAA;QAC/B,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG;AACjC,YAAA,OAAO,EAAE,OAAO;AAChB,YAAA,IAAI,EAAE,EAAS;AACf,YAAA,KAAK,EAAE,EAAE;AACT,YAAA,QAAQ,EAAE,EAAE;SACf,CAAC;KACL;AAOO,IAAA,MAAM,QAAQ,GAAA;AAClB,QAAA,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAC1E,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,eAAe,CAAC,CAAC;QACnE,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC3C,QAAA,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC;AACtD,QAAA,OAAO,KAAK,CAAC;KAChB;AACJ;;MCxDY,gBAAgB,CAAA;IAmBzB,WAAmB,CAAA,KAAe,EAAU,GAAe,EAAA;QAAxC,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAAU,IAAG,CAAA,GAAA,GAAH,GAAG,CAAY;QAjB3D,IAAS,CAAA,SAAA,GAAG,CAAC,CAAC;QACd,IAAc,CAAA,cAAA,GAAQ,EAAE,CAAC;QACzB,IAAe,CAAA,eAAA,GAAQ,EAAE,CAAC;QAC1B,IAAiB,CAAA,iBAAA,GAAQ,EAAE,CAAC;QAC5B,IAAgB,CAAA,gBAAA,GAAuD,EAAE,CAAC;QAC1E,IAAkB,CAAA,kBAAA,GAAQ,EAAE,CAAC;AASZ,QAAA,IAAA,CAAA,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;AAI3C,QAAA,IAAI,CAAC,GAAG,GAAG,IAAI,eAAe,EAAE,CAAC;QACjC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;QACzC,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AAC7C,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,GAAG,CAAC,IAAS,KAAK,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACpE,IAAI,CAAC,UAAU,GAAG,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AAC3E,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACvD,IAAI,CAAC,WAAW,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,CAAC;KACnD;AAED,IAAA,OAAO,CAAC,MAAkB,EAAE,MAAqB,EAAE,IAAU,EAAA;QACzD,MAAM,IAAI,GAAiB,EAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,UAAU,EAAE,KAAK,EAAC,CAAC;QAE5G,OAAO,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,KAAI;YACxC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;YAC/C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,MAAM,CAAC;YAC7C,IAAI,CAAC,SAAS,EAAE,CAAC;AACjB,YAAA,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACrC,SAAC,CAAC,CAAC;KACN;AAED,IAAA,MAAM,SAAS,GAAA;AACX,QAAA,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,WAAW,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;AAClE,QAAA,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,aAAa,CAAC,CAAC;AACnE,QAAA,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;KAC9B;AAED,IAAA,MAAM,KAAK,GAAA;AACP,QAAA,MAAM,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;KAC9D;AAEO,IAAA,cAAc,CAAC,KAAmB,EAAA;AACtC,QAAA,MAAM,IAAI,GAAG,KAAK,CAAC,IAAoB,CAAC;QACxC,IAAI,IAAI,CAAC,UAAU,EAAE;AACjB,YAAA,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;YAC7B,OAAO;AACV,SAAA;AACD,QAAA,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACxB,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACrC,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QACpC,OAAO,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;KAC3C;AAEO,IAAA,YAAY,CAAC,IAAkB,EAAA;QACnC,IAAI;AACA,YAAA,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACjC,YAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;AAC5B,YAAA,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9C,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;YACZ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;AACvC,SAAA;KACJ;AAEO,IAAA,iBAAiB,CAAC,IAAkB,EAAA;QACxC,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AAClC,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/D,SAAA;KACJ;AAEO,IAAA,qBAAqB,CAAC,IAAkB,EAAA;QAC5C,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AACjC,YAAA,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAC1C,SAAA;KACJ;AAEO,IAAA,gBAAgB,CAAC,IAAkB,EAAA;QACvC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;AAChC,YAAA,IAAI,iBAAiB,GAAG,IAAI,CAAC,MAAM,CAAC;YACpC,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,EAAE;AAC3C,gBAAA,iBAAiB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC9E,aAAA;AACD,YAAA,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC5D,SAAA;KACJ;AACJ;;MCtGY,aAAa,CAAA;AACtB,IAAA,WAAA,CAAoB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;KAClC;AAED,IAAA,MAAM,OAAO,GAAA;AAET,QAAA,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,OAAO,IAAG;AAC7C,YAAA,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACvD,YAAA,KAAK,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC9B,YAAA,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,QAAe,CAAC;YACxC,IAAI,IAAI,CAAC,iBAAiB;gBAAE,IAAI,CAAC,iBAAiB,EAAE,CAAC;YACrD,IAAI,CAAC,OAAO,EAAE,CAAC;YACf,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;AAAE,gBAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;;AAClE,gBAAA,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;AACtD,YAAA,KAAK,CAAC,IAAY,GAAG,IAAI,CAAC;AAC1B,YAAA,KAAK,CAAC,KAAa,GAAG,IAAI,CAAC;AAC3B,YAAA,KAAK,CAAC,QAAgB,GAAG,IAAI,CAAC;AACnC,SAAC,CAAC,CAAC;AAEF,QAAA,IAAI,CAAC,KAAK,CAAC,GAAW,GAAG,IAAI,CAAC;AAC9B,QAAA,IAAI,CAAC,KAAK,CAAC,MAAc,GAAG,IAAI,CAAC;KACrC;AACJ;;MCvBY,QAAQ,CAAA;AAIjB,IAAA,WAAA,CAAmB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAFlC,IAAG,CAAA,GAAA,GAA4B,EAAE,CAAC;KAEI;IAEtC,GAAG,CAAC,MAAW,EAAE,YAAoB,EAAA;QACjC,IAAI,IAAI,GAAG,KAAK,CAAC;AACjB,QAAA,IAAI,YAAY,EAAC;AACb,YAAA,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,YAAY,CAAC,WAAW,EAAE,EAAC;gBAC/E,IAAI,GAAG,IAAI,CAAC;AACf,aAAA;AACD,YAAA,OAAO,IAAI,CAAA;AACd,SAAA;AACI,aAAA;AACD,YAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC1D,SAAA;KACJ;AAED,IAAA,MAAM,IAAI,CAAE,OAAe,EAAE,EAAU,EAAA;AACnC,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KAC9C;AAED,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,YAAoB,EAAA;AACjD,QAAA,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;AAC5I,QAAA,OAAO,YAAY,CAAA;KACtB;AAED,IAAA,MAAM,MAAM,CAAC,OAAc,EAAE,YAAmB,EAAA;QAC5C,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,YAAY,CAAC,CAAA;QAC9D,IAAI,YAAY,KAAK,IAAI,EAAC;YACtB,IAAI,KAAK,GAAa,EAAE,CAAC;AACzB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAC;AACzC,gBAAA,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;AAC1D,gBAAA,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,aAAA;AACD,YAAA,OAAO,KAAK,CAAC;AAChB,SAAA;KACJ;AACJ;;MCtCY,IAAI,CAAA;AAcb,IAAA,WAAA,CAAmB,KAAe,EAAA;QAAf,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;QAblC,IAAQ,CAAA,QAAA,GAAG,KAAK,CAAC;QACjB,IAAS,CAAA,SAAA,GAAyB,EAAE,CAAA;QACpC,IAAa,CAAA,aAAA,GAAyB,EAAE,CAAA;QACxC,IAAa,CAAA,aAAA,GAAyB,EAAE,CAAA;QACxC,IAAS,CAAA,SAAA,GAAyB,EAAE,CAAA;QACpC,IAAkB,CAAA,kBAAA,GAAyB,EAAE,CAAA;QAC7C,IAAW,CAAA,WAAA,GAAyB,EAAE,CAAA;QACtC,IAAK,CAAA,KAAA,GAAyB,EAAE,CAAA;QAChC,IAAS,CAAA,SAAA,GAAyB,EAAE,CAAA;QACpC,IAAQ,CAAA,QAAA,GAAyB,EAAE,CAAA;QACnC,IAAS,CAAA,SAAA,GAAyB,EAAE,CAAA;QAIhC,IAAI,CAAC,KAAK,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAEzC;IAID,MAAM,IAAI,CAAC,OAAe,EAAA;AACtB,QAAA,MAAM,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;AAC7B,QAAA,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;AACrC,QAAA,MAAM,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAA;AACrC,QAAA,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAA;AACjC,QAAA,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;AACnC,QAAA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAA;KAEvB;IAGD,MAAM,iBAAiB,CAAC,OAAe,EAAA;AACnC,QAAA,IAAI,aAAa,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAA;AACvE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AAC1C,YAAA,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;AACnC,YAAA,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG;gBACzC,IAAI,EAAE,YAAY,CAAC,SAAS;AAC5B,gBAAA,MAAM,EAAE,YAAY,CAAC,IAAI,CAAC,KAAK;AAC/B,gBAAA,aAAa,GAAG,CAAC,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;AACjF,gBAAA,UAAU,EAAE,EAAE;AACd,gBAAA,cAAc,GAAG,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,KAAK,GAAG,EAAE,CAAC;AACpF,gBAAA,WAAW,GAAG,CAAC,YAAY,CAAC,SAAS,IAAI,YAAY,CAAC,SAAS,CAAC,KAAK,GAAG,EAAE,CAAC;AAC3E,gBAAA,YAAY,GAAG,CAAC,YAAY,CAAC,UAAU,IAAI,YAAY,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;AAC9E,gBAAA,YAAY,GAAG,CAAC,YAAY,CAAC,UAAU,IAAI,YAAY,CAAC,UAAU,CAAC,KAAK,GAAG,EAAE,CAAC;AAC9E,gBAAA,gBAAgB,EAAE,EAAE;aACvB,CAAA;AACJ,SAAA;AACD,QAAA,IAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAA;KAC/C;IAGD,MAAM,8BAA8B,CAAC,OAAe,EAAA;AAChD,QAAA,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;AAC9E,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACzC,YAAA,IAAI,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;AAClC,YAAA,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AACxF,YAAA,IAAI,cAAc,GAAG,WAAW,CAAC,cAAc,CAAC;YAChD,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,iBAAiB,CAAC,EAAE;AACpD,gBAAA,KAAK,IAAI,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,cAAc,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;oBAC1E,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC;AAC3G,iBAAA;AACJ,aAAA;AACJ,SAAA;KACJ;IAED,MAAM,SAAS,CAAC,OAAe,EAAA;AAC3B,QAAA,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAA;AACvD,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AAClC,YAAA,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;AACnB,YAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG;gBACzB,IAAI,EAAE,IAAI,CAAC,SAAS;AACpB,gBAAA,MAAM,GAAG,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAC5C,gBAAA,gBAAgB,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC;AAC1E,gBAAA,UAAU,GAAG,CAAC,IAAI,CAAC,QAAQ,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;AACxF,gBAAA,gBAAgB,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,GAAG,EAAE,CAAC;AAC1E,gBAAA,aAAa,GAAG,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;AACjE,gBAAA,iBAAiB,EAAE,EAAE;AACrB,gBAAA,gBAAgB,EAAE,EAAE;AACpB,gBAAA,QAAQ,EAAE,EAAE;AACZ,gBAAA,WAAW,EAAE,EAAE;AACf,gBAAA,SAAS,EAAE,EAAE;AACb,gBAAA,UAAU,EAAE,EAAE;AACd,gBAAA,OAAO,EAAE,EAAE;AACX,gBAAA,YAAY,EAAE,EAAE;AAChB,gBAAA,YAAY,EAAC,EAAE;AACf,gBAAA,6BAA6B,EAAE,EAAE;aACpC,CAAA;AACJ,SAAA;AACD,QAAA,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAA;AACpC,QAAA,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;AACnC,QAAA,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA;AACnC,QAAA,MAAM,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAA;AACtC,QAAA,MAAM,IAAI,CAAC,4BAA4B,CAAC,OAAO,CAAC,CAAA;KACnD;IAED,MAAM,gBAAgB,CAAC,OAAe,EAAA;AAClC,QAAA,IAAI,YAAY,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAA;AACxE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAC;YACzC,IAAI,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;YACvC,IAAG,aAAa,KAAI,CAAC,EAAC;AAClB,gBAAA,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;AAC/D,gBAAA,IAAI,eAAe,GAAG,WAAW,CAAC,cAAc,CAAC,KAAK,CAAC;AACvD,gBAAA,IAAI,eAAe,GAAG,WAAW,CAAC,eAAe,CAAC,KAAK,CAAC;AACxD,gBAAA,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,iBAAiB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;AAC1E,gBAAA,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,CAAA;AAC5E,aAAA;AACJ,SAAA;KAEJ;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;AACjC,QAAA,IAAI,uBAAuB,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;AACzF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,uBAAuB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACpD,YAAA,IAAI,mBAAmB,GAAG,uBAAuB,CAAC,CAAC,CAAC,CAAA;YACpD,IAAI,aAAa,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;YAChG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,SAAS,CAAC,EAAE;AAC1C,gBAAA,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;AAChG,gBAAA,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AAClF,aAAA;AACJ,SAAA;KACJ;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;AACjC,QAAA,IAAI,UAAU,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;AACjE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACvC,YAAA,IAAI,QAAQ,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7B,YAAA,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YACpF,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,EAAE;AAC5C,gBAAA,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC;AAC7C,gBAAA,KAAK,IAAI,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE;oBAC7E,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;oBAC7F,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AAC3F,iBAAA;AACJ,aAAA;AACJ,SAAA;KACJ;IAED,MAAM,kBAAkB,CAAC,OAAe,EAAA;AACpC,QAAA,IAAI,oBAAoB,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;AACtF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACjD,YAAA,IAAI,kBAAkB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;AACjD,YAAA,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAC/F,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,CAAC,EAAE;AAC5C,gBAAA,IAAI,cAAc,GAAG,kBAAkB,CAAC,cAAc,CAAC;AACvD,gBAAA,KAAK,IAAI,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE;oBAC7E,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;AAChG,iBAAA;AACJ,aAAA;AACJ,SAAA;KACJ;IAED,MAAM,4BAA4B,CAAC,OAAe,EAAA;AAC9C,QAAA,IAAI,oBAAoB,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,wBAAwB,CAAC,CAAC;AACtF,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,oBAAoB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACjD,YAAA,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC;AAClD,YAAA,IAAI,eAAe,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;YAChG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,EAAE,iBAAiB,CAAC,EAAE;AACpD,gBAAA,IAAI,cAAc,GAAG,mBAAmB,CAAC,cAAc,CAAC;AACxD,gBAAA,KAAK,IAAI,YAAY,GAAG,CAAC,EAAE,YAAY,GAAG,cAAc,CAAC,MAAM,EAAE,YAAY,EAAE,EAAE;oBAC7E,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC,6BAA6B,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,CAAC;AACjH,iBAAA;AACJ,aAAA;AACJ,SAAA;KACJ;IAED,MAAM,iBAAiB,CAAC,OAAe,EAAA;AACnC,QAAA,IAAI,aAAa,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAA;AACvE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AAC1C,YAAA,IAAI,YAAY,GAAG,aAAa,CAAC,CAAC,CAAC,CAAA;AACnC,YAAA,IAAI,gBAAgB,GAAG;gBACnB,IAAI,EAAE,YAAY,CAAC,SAAS;AAC5B,gBAAA,MAAM,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,YAAY,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AAC5D,gBAAA,aAAa,GAAG,CAAC,YAAY,CAAC,WAAW,IAAI,YAAY,CAAC,WAAW,CAAC,KAAK,GAAG,EAAE,CAAC;AACjF,gBAAA,cAAc,GAAG,CAAC,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,GAAG,EAAE,CAAC;AAC9E,gBAAA,gBAAgB,GAAG,CAAC,YAAY,CAAC,cAAc,IAAI,YAAY,CAAC,cAAc,GAAG,EAAE,CAAC;aACvF,CAAA;YACD,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,GAAG,gBAAgB,CAAA;AAChE,SAAA;KAEJ;IAED,MAAM,aAAa,CAAC,OAAe,EAAA;AAC/B,QAAA,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,aAAa,CAAC,CAAA;AAC/D,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACtC,YAAA,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAA;AAC3B,YAAA,IAAI,YAAY,GAAG;AACf,gBAAA,MAAM,GAAG,CAAC,QAAQ,CAAC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;AACpD,gBAAA,mBAAmB,GAAG,CAAC,QAAQ,CAAC,iBAAiB,IAAI,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,iBAAiB,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBAC3H,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACjE,QAAQ,GAAG,CAAC,QAAQ,CAAC,MAAM,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aACvE,CAAA;YACD,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,YAAY,CAAA;AACpD,SAAA;KACJ;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;AACjC,QAAA,IAAI,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAA;AACnE,QAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAC;AACxC,YAAA,IAAI,UAAU,GAAG,WAAW,CAAC,CAAC,CAAC,CAAA;AAC/B,YAAA,IAAI,YAAY,GAAG;gBACf,WAAW,GAAG,CAAC,UAAU,CAAC,SAAS,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;gBACjF,SAAS,GAAG,CAAC,UAAU,CAAC,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aAC9E,CAAA;YACD,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,SAAS,CAAC,GAAG,YAAY,CAAA;AACxD,SAAA;KACJ;AACJ;;MC/LY,UAAU,CAAA;AAAvB,IAAA,WAAA,GAAA;AACI,QAAA,IAAA,CAAA,KAAK,GAAa;AACd,YAAA,MAAM,EAAE,EAAE;AACV,YAAA,GAAG,EAAE,IAAI,MAAM,CAAC,MAAM,EAAE;AACxB,YAAA,OAAO,EAAE,KAAK;YACd,MAAM,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,EAAE;SACtC,CAAC;AAEF,QAAA,IAAA,CAAA,GAAG,GAAG,IAAI,UAAU,EAAE,CAAC;AACvB,QAAA,IAAA,CAAA,MAAM,GAAc,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;AACxD,QAAA,IAAA,CAAA,OAAO,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QAClD,IAAK,CAAA,KAAA,GAAG,IAAI,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjC,IAAY,CAAA,YAAA,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACpC,IAAU,CAAA,UAAA,GAAuB,IAAI,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjE,IAAK,CAAA,KAAA,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAEpC,IAAY,CAAA,YAAA,GAAG,KAAK,CAAC;QAEb,IAAO,CAAA,OAAA,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAyanD;AAnaG,IAAA,IAAI,MAAM,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;KACzB;IAID,MAAM,KAAK,CAAC,MAAmB,EAAA;;QAC3B,IAAI,KAAK,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA,EAAA,GAAA,IAAI,CAAC,KAAK,CAAC,kBAAkB,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAO,EAAE,CAAa,CAAC;AAClG,QAAA,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAG1B,IAAI;YACA,MAAM,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AAC7C,SAAA;AAAC,QAAA,OAAO,CAAC,EAAE;AACR,YAAA,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;AACpD,SAAA;AACD,QAAA,OAAO,KAAK,CAAC;KAChB;IAgBD,MAAM,WAAW,CAAC,IAAY,EAAA;QAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACjC,QAAA,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;KAC9B;AAOD,IAAA,iBAAiB,CAAC,iBAAsB,EAAE,iBAAsB,EAAE,kBAAuB,EAAA;QACrF,IAAI,CAAC,GAAG,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,kBAAkB,CAAC,CAAC;KACxF;AAMD,IAAA,aAAa,CAAC,UAA2C,EAAA;AACrD,QAAA,IAAI,CAAC,KAAK,CAAC,UAAU,GAAG,UAAU,CAAC;KACtC;AAOD,IAAA,uBAAuB,CAAC,MAAe,EAAA;AACnC,QAAA,IAAI,CAAC,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC;KAC1C;IAKD,uBAAuB,GAAA;AACnB,QAAA,OAAO,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;KACxC;IAKD,MAAM,iBAAiB,CAAC,QAAwB,EAAA;AAC5C,QAAA,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,QAAQ,CAAC;QACrC,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YACzC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,yBAAyB,EAAE,CAAC;AAC7D,SAAA;KACJ;AAOD,IAAA,MAAM,aAAa,CAAC,MAAe,EAAE,IAAa,EAAA;QAC9C,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,KAAK,MAAM;YAAE,OAAO;AAEhD,QAAA,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC;AACtB,QAAA,IAAI,MAAM,EAAE;AACR,YAAA,IAAI,CAAC,IAAI;AAAE,gBAAA,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;YACzE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;YAClC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AAC9B,YAAA,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;AAC/B,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;AACjC,YAAA,IAAG,IAAI;AAAE,gBAAA,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;AACzC,SAAA;AAAM,aAAA;YACH,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;AACxC,SAAA;KACJ;AAUD,IAAA,MAAM,WAAW,CAAC,OAAO,GAAG,IAAI,EAAA;;AAC5B,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;AAC7B,QAAA,IAAI,OAAO,EAAE;YACT,OAAM,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,CAAC,kBAAkB,EAAE,CAAA,CAAC;AACvD,SAAA;KACJ;AASD,IAAA,MAAM,gBAAgB,CAAC,OAAe,EAAE,IAAkC,EAAA;;QACtE,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACzC,QAAA,IAAI,CAAC,KAAK;AAAE,YAAA,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;AACpF,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;AAC1B,YAAA,OAAM,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,CAAC,wBAAwB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA,CAAC;AAC1E,SAAA;AAAM,aAAA;AACH,YAAA,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB,SAAA;KACJ;AASD,IAAA,MAAM,sBAAsB,CAAC,OAAe,EAAE,IAAY,EAAA;;AACtD,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;AAC1B,YAAA,OAAM,CAAA,EAAA,GAAA,IAAI,CAAC,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,WAAW,CAAC,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAA,CAAC;AACxE,SAAA;KACJ;IAOD,KAAK,CAAC,OAAe,EAAE,KAAa,EAAA;QAChC,IAAI;YACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;AACnC,YAAA,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;AAC7C,YAAA,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC;AACpC,YAAA,IAAI,KAAK;AAAE,gBAAA,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9B,YAAA,QAAQ,aAAR,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAR,QAAQ,CAAE,OAAO,EAAE,CAAC;AACpB,YAAA,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,EAAE,CAAC,GAAG,QAAQ,KAAR,IAAA,IAAA,QAAQ,KAAR,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,QAAQ,CAAE,OAAO,EAAE,CAAC;YACnF,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACrC,SAAA;AAAC,QAAA,OAAM,CAAC,EAAE;AACP,YAAA,OAAO,CAAC,IAAI,CAAC,kBAAkB,OAAO,CAAA,OAAA,CAAS,CAAC,CAAC;AACpD,SAAA;KACJ;IAQD,YAAY,CAAC,QAAwB,EAAE,SAAiB,EAAA;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC;KAC5D;AAeD,IAAA,iBAAiB,CAAC,OAAe,EAAE,IAAY,EAAE,OAAgB,EAAA;AAC7D,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;KACpE;AAQD,IAAA,iBAAiB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAC5D,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACpE;AASD,IAAA,eAAe,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAC1D,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,eAAe,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KAClE;AAUD,IAAA,iBAAiB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AAC5D,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACpE;AAQD,IAAA,sBAAsB,CAAC,OAAe,EAAE,EAAU,EAAE,SAAS,GAAG,KAAK,EAAA;AACjE,QAAA,OAAO,IAAI,CAAC,UAAU,CAAC,sBAAsB,CAAC,OAAO,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;KACzE;IAOD,UAAU,CAAC,OAAe,EAAE,EAAU,EAAA;AAClC,QAAA,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACpD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;KACrD;IAYD,mBAAmB,CAAC,OAAe,EAAE,iBAA2B,EAAA;QAC5D,OAAO,IAAI,CAAC,UAAU,CAAC,mBAAmB,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;KAC1E;AASD,IAAA,SAAS,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAiB,EAAA;AAC7D,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC9D;AAQD,IAAA,YAAY,CAAC,OAAe,EAAE,QAAmB,EAAE,QAAiB,EAAA;QAChE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC1D;AAYD,IAAA,YAAY,CAAC,MAAoB,EAAA;QAC7B,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;KAC5C;AASD,IAAA,gBAAgB,CAAC,OAAe,EAAE,GAAa,EAAE,QAAiB,EAAE,QAAmB,EAAA;AACnF,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAC1E;AASD,IAAA,WAAW,CAAC,OAAe,EAAE,QAAiB,EAAE,QAAmB,EAAA;AAC/D,QAAA,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;KAChE;AAaD,IAAA,MAAM,GAAG,CAAC,MAAW,EAAE,YAAoB,EAAA;QACvC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;KAC/C;IAED,MAAM,eAAe,CAAC,OAAe,EAAA;QACjC,MAAM,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,YAAY,CAAC;KAC5B;AASD,IAAA,MAAM,MAAM,CAAC,OAAe,EAAE,WAAmB,EAAA;QAC7C,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KAClD;AAOD,IAAA,MAAM,IAAI,CAAC,OAAe,EAAE,EAAU,EAAA;QAClC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;KACvC;AAQD,IAAA,MAAM,SAAS,CAAC,OAAe,EAAE,WAAmB,EAAA;QAChD,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;KACrD;AAUD,IAAA,MAAM,OAAO,GAAA;QACT,QAAQ,CAAC,OAAO,EAAE,CAAC;AACnB,QAAA,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;AAC7B,QAAA,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;QACvB,IAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM;AAAE,YAAA,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;AACzE,QAAA,IAAI,CAAC,KAAa,GAAG,IAAI,CAAC;KAC9B;AASD,IAAA,MAAM,aAAa,GAAA;;AACf,QAAA,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE;YAC1B,OAAM,MAAA,IAAI,CAAC,MAAM,MAAE,IAAA,IAAA,EAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAK,EAAE,CAAA,CAAC;AAC9B,SAAA;AAAM,aAAA;AAEH,YAAA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC;AACtB,YAAA,IAAI,CAAC,KAAK,CAAC,GAAW,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,MAAM,CAAC,MAAM,EAAE,CAAC;AACxC,SAAA;KACJ;AAKD,IAAA,iBAAiB,CAAC,OAAe,EAAA;QAC7B,OAAO,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;KACjD;AAEO,IAAA,MAAM,iBAAiB,GAAA;AAC3B,QAAA,IAAI,CAAC,MAAM,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;QACzD,IAAI,CAAC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;AACzC,QAAA,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC;QACjF,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;QACjC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,kBAAkB,EAAE,CAAC;QACnD,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,yBAAyB,EAAE,CAAC;KAC7D;AAGJ;;AC1cD,MAAM,SAAU,SAAQ,MAAM,CAAA;AAI1B,IAAA,WAAA,CAAY,OAAwB,EAAA;QAChC,KAAK,CAAC,OAAO,CAAC,CAAC;AACf,QAAA,IAAI,CAAC,UAAU,GAAG,IAAI,UAAU,EAAE,CAAC;KACtC;AAED,IAAA,IAAI,CACA,GAAQ,EACR,MAA+B,EAC/B,UAA2C,EAC3C,OAAqC,EAAA;QAErC,MAAM,KAAK,GAAG,IAAI,CAAC;QAEnB,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC7C,QAAA,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AAC7B,QAAA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC3B,QAAA,MAAM,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;AACtC,QAAA,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;AAC7C,QAAA,MAAM,CAAC,kBAAkB,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;AACjD,QAAA,MAAM,CAAC,IAAI,CACP,GAAG,EACH,gBAAgB,MAAM,EAAA;YAClB,IAAI;AACA,gBAAA,IAAI,OAAO,MAAM,IAAI,QAAQ,EAAE;AAC3B,oBAAA,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;AAC3D,iBAAA;gBACD,MAAM,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;AACrC,aAAA;AAAC,YAAA,OAAO,CAAM,EAAE;AACb,gBAAA,IAAI,OAAO,EAAE;oBACT,OAAO,CAAC,CAAC,CAAC,CAAC;AACd,iBAAA;AAAM,qBAAA;AACH,oBAAA,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACpB,iBAAA;AAED,gBAAA,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AAChC,aAAA;AACL,SAAC,EACD,UAAU,EACV,OAAO,CACV,CAAC;KACL;AAED,IAAA,KAAK,CAAC,MAAmB,EAAA;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;KACxC;AACJ;;;;"}