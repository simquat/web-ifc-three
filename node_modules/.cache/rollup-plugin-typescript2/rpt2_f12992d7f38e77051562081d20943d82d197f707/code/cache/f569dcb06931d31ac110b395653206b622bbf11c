{"code":"import { IFCSPACE, IFCOPENINGELEMENT, IFCPRODUCTDEFINITIONSHAPE } from 'web-ifc';\r\nimport { Color, MeshLambertMaterial, DoubleSide, Matrix4, BufferGeometry, BufferAttribute, Mesh } from 'three';\r\nimport { mergeBufferGeometries } from 'three/examples/jsm/utils/BufferGeometryUtils';\r\nimport { IFCModel } from './IFCModel';\r\nexport class IFCParser {\r\n    constructor(state, BVH) {\r\n        this.state = state;\r\n        this.BVH = BVH;\r\n        this.loadedModels = 0;\r\n        this.optionalCategories = {\r\n            [IFCSPACE]: true,\r\n            [IFCOPENINGELEMENT]: false\r\n        };\r\n        this.geometriesByMaterials = {};\r\n        this.loadingState = {\r\n            total: 0,\r\n            current: 0,\r\n            step: 0.1\r\n        };\r\n        this.currentWebIfcID = -1;\r\n        this.currentModelID = -1;\r\n    }\r\n    async setupOptionalCategories(config) {\r\n        this.optionalCategories = config;\r\n    }\r\n    async parse(buffer, coordinationMatrix) {\r\n        if (this.state.api.wasmModule === undefined)\r\n            await this.state.api.Init();\r\n        await this.newIfcModel(buffer);\r\n        this.loadedModels++;\r\n        if (coordinationMatrix) {\r\n            await this.state.api.SetGeometryTransformation(this.currentWebIfcID, coordinationMatrix);\r\n        }\r\n        return this.loadAllGeometry(this.currentWebIfcID);\r\n    }\r\n    getAndClearErrors(_modelId) {\r\n    }\r\n    notifyProgress(loaded, total) {\r\n        if (this.state.onProgress)\r\n            this.state.onProgress({ loaded, total });\r\n    }\r\n    async newIfcModel(buffer) {\r\n        const data = new Uint8Array(buffer);\r\n        this.currentWebIfcID = await this.state.api.OpenModel(data, this.state.webIfcSettings);\r\n        this.currentModelID = this.state.useJSON ? this.loadedModels : this.currentWebIfcID;\r\n        this.state.models[this.currentModelID] = {\r\n            modelID: this.currentModelID,\r\n            mesh: {},\r\n            types: {},\r\n            jsonData: {}\r\n        };\r\n    }\r\n    async loadAllGeometry(modelID) {\r\n        this.addOptionalCategories(modelID);\r\n        await this.initializeLoadingState(modelID);\r\n        this.state.api.StreamAllMeshes(modelID, (mesh) => {\r\n            this.updateLoadingState();\r\n            this.streamMesh(modelID, mesh);\r\n        });\r\n        this.notifyLoadingEnded();\r\n        const geometries = [];\r\n        const materials = [];\r\n        Object.keys(this.geometriesByMaterials).forEach((key) => {\r\n            const geometriesByMaterial = this.geometriesByMaterials[key].geometries;\r\n            const merged = mergeBufferGeometries(geometriesByMaterial);\r\n            materials.push(this.geometriesByMaterials[key].material);\r\n            geometries.push(merged);\r\n        });\r\n        const combinedGeometry = mergeBufferGeometries(geometries, true);\r\n        this.cleanUpGeometryMemory(geometries);\r\n        if (this.BVH)\r\n            this.BVH.applyThreeMeshBVH(combinedGeometry);\r\n        const model = new IFCModel(combinedGeometry, materials);\r\n        this.state.models[this.currentModelID].mesh = model;\r\n        return model;\r\n    }\r\n    async initializeLoadingState(modelID) {\r\n        const shapes = await this.state.api.GetLineIDsWithType(modelID, IFCPRODUCTDEFINITIONSHAPE);\r\n        this.loadingState.total = shapes.size();\r\n        this.loadingState.current = 0;\r\n        this.loadingState.step = 0.1;\r\n    }\r\n    notifyLoadingEnded() {\r\n        this.notifyProgress(this.loadingState.total, this.loadingState.total);\r\n    }\r\n    updateLoadingState() {\r\n        const realCurrentItem = Math.min(this.loadingState.current++, this.loadingState.total);\r\n        if (realCurrentItem / this.loadingState.total >= this.loadingState.step) {\r\n            const currentProgress = Math.ceil(this.loadingState.total * this.loadingState.step);\r\n            this.notifyProgress(currentProgress, this.loadingState.total);\r\n            this.loadingState.step += 0.1;\r\n        }\r\n    }\r\n    addOptionalCategories(modelID) {\r\n        const optionalTypes = [];\r\n        for (let key in this.optionalCategories) {\r\n            if (this.optionalCategories.hasOwnProperty(key)) {\r\n                const category = parseInt(key);\r\n                if (this.optionalCategories[category])\r\n                    optionalTypes.push(category);\r\n            }\r\n        }\r\n        this.state.api.StreamAllMeshesWithTypes(this.currentWebIfcID, optionalTypes, (mesh) => {\r\n            this.streamMesh(modelID, mesh);\r\n        });\r\n    }\r\n    streamMesh(modelID, mesh) {\r\n        const placedGeometries = mesh.geometries;\r\n        const size = placedGeometries.size();\r\n        for (let i = 0; i < size; i++) {\r\n            const placedGeometry = placedGeometries.get(i);\r\n            let itemMesh = this.getPlacedGeometry(modelID, mesh.expressID, placedGeometry);\r\n            let geom = itemMesh.geometry.applyMatrix4(itemMesh.matrix);\r\n            this.storeGeometryByMaterial(placedGeometry.color, geom);\r\n        }\r\n    }\r\n    getPlacedGeometry(modelID, expressID, placedGeometry) {\r\n        const geometry = this.getBufferGeometry(modelID, expressID, placedGeometry);\r\n        const mesh = new Mesh(geometry);\r\n        mesh.matrix = this.getMeshMatrix(placedGeometry.flatTransformation);\r\n        mesh.matrixAutoUpdate = false;\r\n        return mesh;\r\n    }\r\n    getBufferGeometry(modelID, expressID, placedGeometry) {\r\n        const geometry = this.state.api.GetGeometry(modelID, placedGeometry.geometryExpressID);\r\n        const verts = this.state.api.GetVertexArray(geometry.GetVertexData(), geometry.GetVertexDataSize());\r\n        const indices = this.state.api.GetIndexArray(geometry.GetIndexData(), geometry.GetIndexDataSize());\r\n        const buffer = this.ifcGeometryToBuffer(expressID, verts, indices);\r\n        geometry.delete();\r\n        return buffer;\r\n    }\r\n    storeGeometryByMaterial(color, geometry) {\r\n        let colID = `${color.x}${color.y}${color.z}${color.w}`;\r\n        if (this.geometriesByMaterials[colID]) {\r\n            this.geometriesByMaterials[colID].geometries.push(geometry);\r\n            return;\r\n        }\r\n        const col = new Color().setRGB(color.x, color.y, color.z, 'srgb');\r\n        const material = new MeshLambertMaterial({ color: col, side: DoubleSide });\r\n        material.transparent = color.w !== 1;\r\n        if (material.transparent)\r\n            material.opacity = color.w;\r\n        this.geometriesByMaterials[colID] = { material, geometries: [geometry] };\r\n    }\r\n    getMeshMatrix(matrix) {\r\n        const mat = new Matrix4();\r\n        mat.fromArray(matrix);\r\n        return mat;\r\n    }\r\n    ifcGeometryToBuffer(expressID, vertexData, indexData) {\r\n        const geometry = new BufferGeometry();\r\n        const posFloats = new Float32Array(vertexData.length / 2);\r\n        const normFloats = new Float32Array(vertexData.length / 2);\r\n        const idAttribute = new Uint32Array(vertexData.length / 6);\r\n        for (let i = 0; i < vertexData.length; i += 6) {\r\n            posFloats[i / 2] = vertexData[i];\r\n            posFloats[i / 2 + 1] = vertexData[i + 1];\r\n            posFloats[i / 2 + 2] = vertexData[i + 2];\r\n            normFloats[i / 2] = vertexData[i + 3];\r\n            normFloats[i / 2 + 1] = vertexData[i + 4];\r\n            normFloats[i / 2 + 2] = vertexData[i + 5];\r\n            idAttribute[i / 6] = expressID;\r\n        }\r\n        geometry.setAttribute('position', new BufferAttribute(posFloats, 3));\r\n        geometry.setAttribute('normal', new BufferAttribute(normFloats, 3));\r\n        geometry.setAttribute('expressID', new BufferAttribute(idAttribute, 1));\r\n        geometry.setIndex(new BufferAttribute(indexData, 1));\r\n        return geometry;\r\n    }\r\n    cleanUpGeometryMemory(geometries) {\r\n        geometries.forEach(geometry => geometry.dispose());\r\n        Object.keys(this.geometriesByMaterials).forEach((materialID) => {\r\n            const geometriesByMaterial = this.geometriesByMaterials[materialID];\r\n            geometriesByMaterial.geometries.forEach(geometry => geometry.dispose());\r\n            geometriesByMaterial.geometries = [];\r\n            geometriesByMaterial.material = null;\r\n        });\r\n        this.geometriesByMaterials = {};\r\n    }\r\n}\r\n//# sourceMappingURL=IFCParser.js.map","references":["/Users/simquat/Development/web-ifc-three/node_modules/web-ifc/web-ifc-api-node.d.ts","/Users/simquat/Development/web-ifc-three/web-ifc-three/src/IFC/BaseDefinitions.ts","/Users/simquat/Development/web-ifc-three/node_modules/@types/three/index.d.ts","/Users/simquat/Development/web-ifc-three/node_modules/@types/three/examples/jsm/utils/BufferGeometryUtils.d.ts","/Users/simquat/Development/web-ifc-three/web-ifc-three/src/IFC/components/BvhManager.ts","/Users/simquat/Development/web-ifc-three/web-ifc-three/src/IFC/components/IFCModel.ts"],"map":"{\"version\":3,\"file\":\"IFCParser.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/IFC/components/IFCParser.ts\"],\"names\":[],\"mappings\":\"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\"}"}
